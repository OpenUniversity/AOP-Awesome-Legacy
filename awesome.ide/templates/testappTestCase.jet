<%@jet package="awesome.ide.gen" class="TestappTestCaseGen" imports="awesome.ide.model.* " %>
<% String packageName = (String)(((Object[])argument)[0]); %>
<% String amProjectName = (String)(((Object[])argument)[1]); %>
<% String[] mechanismNames = (String[])(((Object[])argument)[2]); %>
package <%=packageName%>;

import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import <%=amProjectName%>.WeavingInfo;
import static <%=amProjectName%>.WeavingInfo.*;

/**
 * Here you test your example application (Of course, you may define other test cases as well).<br/>
 * The testing approach is as follows:<br/>
 * <ul>
 * <li>During the weaving of your application, weaving information is being collected,
 * and serialized to a file in the folder <b>weaving-info</b>.</li>
 * <li>The <b>setup</b> method reads that file to the <b>info</b> field, which is available to
 * all test methods.</li>
 * <li>A test method may verify (via <b>info</b>) that a particular aspect of the weaving
 * , e.g., the <b>match</b> process, was handled as expected.</li>
 * <li>Don't forget to re-weave your application after each change so the weaving info will
 * be re-collected.</li>
 * <li>The tests method generated below hold example tests that also introduce
 * the {@link WeavingInfo}'s API.</li> 
 * </ul>
 * @author oren
 */
public class <%=AspectMechanismTestProject.TESTCASE_NAME%> {
	private WeavingInfo info;
	
	@Before
	public void setup() {
		info = getWeavingInfo();
	}
	/**
	 * A test for the reify process.
	 */
	@Test
	public void testReify() {
		// test reify of <%=AspectMechanismTestProject.BASE_FOLDER%>.<%=AspectMechanismTestProject.TESTAPP_MAIN%>
		List<String> shadows = info.getRefiedShadows("<%=AspectMechanismTestProject.BASE_FOLDER%>.<%=AspectMechanismTestProject.TESTAPP_MAIN%>");
		List<String> expected = Arrays.asList(CONSTRUCTOR_EXECUTION,
				FIELD_GET, METHOD_CALL, METHOD_EXECUTION, STATICINITIALIZATION);
		assertEquals(expected, shadows);
		// test reify of <%=AspectMechanismTestProject.ASPECTS_FOLDER%>.My<%=Utils.capitalize(mechanismNames[0])%>Aspect
		shadows = info.getRefiedShadows("<%=AspectMechanismTestProject.ASPECTS_FOLDER%>.My<%=Utils.capitalize(mechanismNames[0])%>Aspect");
		expected = Arrays.asList(ADVICE_EXECUTION, ADVICE_EXECUTION);
		assertEquals(expected, shadows);
	}
	/**
	 * A test for the match process.
	 */
	public void testMatch() {
		List<String> advice = info.getMatchedAdvice("<%=AspectMechanismTestProject.BASE_FOLDER%>.<%=AspectMechanismTestProject.TESTAPP_MAIN%>.main");
		System.out.println(advice);
		assertEquals(6, advice.size());
	}
	/**
	 * A test for the match process (before advice).
	 */
	@Test
	public void testMatchBefore() {
		List<String> advice = info.getMatchedBeforeAdvice("<%=AspectMechanismTestProject.BASE_FOLDER%>.<%=AspectMechanismTestProject.TESTAPP_MAIN%>.main");
		System.out.println(advice);
		assertEquals(3, advice.size());
		// note that by default there is no guarantee for a specific advice order<%for(String mech : mechanismNames) {%>
		assertTrue(advice.contains("<%=mech%>.before"));<%}%>
	}
	/**
	 * A test for the match process (after advice).
	 */
	@Test
	public void testMatchAfter() {
		List<String> advice = info.getMatchedAfterAdvice("base.MyBase.main");
		System.out.println(advice);
		assertEquals(3, advice.size());
		// note that by default there is no guarantee for a specific advice order<%for(String mech : mechanismNames) {%>
		assertTrue(advice.contains("<%=mech%>.after"));<%}%>
	}
	private WeavingInfo getWeavingInfo() {
		try {
			ObjectInputStream in = new ObjectInputStream(
			new FileInputStream("weaving-info/WeavingInfo.out"));
			return (WeavingInfo)in.readObject();
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
}