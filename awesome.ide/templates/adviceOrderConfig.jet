<%@ jet package="awesome.ide.gen" imports="awesome.ide.model.manifests.* awesome.ide.model.* java.util.*" class="AdviceOrderConfigGen" %>
<% List<Advice> adviceOrder = (List<Advice>)argument; %>
package <%=MultiMechanismProject.CONFIG_FOLDER%>;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.aspectj.weaver.AdviceKind;
import org.aspectj.weaver.bcel.BcelShadow;

import awesome.platform.IEffect;
import awesome.platform.MultiMechanism;

public aspect <%=Utils.capitalize(adviceOrder.get(0).getType())%>AdviceOrderConfig {
	List<IEffect> around(MultiMechanism mm, List<List<IEffect>> multiEffects, BcelShadow shadow):
		execution(List MultiMechanism.multiOrder(List, BcelShadow))
			&& this(mm) && args(multiEffects, shadow) {
					
			List<IEffect> effects = proceed(mm, multiEffects, shadow);

			// we remove the effects to be sorted from the list of effects,
			// sort them separately, and then append to the list.
			List<IEffect> removedEffects = removeEffects(effects, AdviceKind.<%=Utils.capitalize(adviceOrder.get(0).getType())%>);
			Collections.sort(removedEffects, new EffectComparator(AdviceKind.<%=Utils.capitalize(adviceOrder.get(0).getType())%>, 
					Arrays.asList(<%for(int i=0, j=adviceOrder.size()-1; i<adviceOrder.size(); i++, j--){%>"<%if(adviceOrder.get(0).getType().equals(CSManifest.AFTER_ADVICE)){%><%=adviceOrder.get(j).getMechanism()%><%}else{%><%=adviceOrder.get(i).getMechanism()%><%}%>"<%if(i!=adviceOrder.size()-1){%>, <%}}%>)));
			
			effects.addAll(removedEffects);
			
			return effects;
	}
	
	/**
	 * Removes all effects of the given kind from the list of effects, and returns
	 * a list of the removed effects.
	 * @param effects
	 * @param kind
	 * @return
	 */
	private List<IEffect> removeEffects(List<IEffect> effects, AdviceKind kind) {
		List<IEffect> result = new ArrayList<IEffect>();
		for(IEffect effect : effects)
			if(effect.getKind().equals(kind))
				result.add(effect);

		for(IEffect effect : result)
			effects.remove(effect);
		
		return result;
	}
}