<%@ jet package="awesome.ide.gen" class="AspectMechanismGen" %>
<%String packageName = ((String[])argument)[0];%>
<%String aspectName = ((String[])argument)[1];%>
<%String id = ((String[])argument)[2];%>
package <%=packageName%>;

import awesome.platform.*;
import java.util.List;
import org.aspectj.weaver.bcel.BcelShadow;

/**
 * <p>Every aspect mechanism extends <b>awesome.platform.AwesomeMechanism</b>. By that, your mechanism may reuse the
 * <b>match</b> and <b>order</b> services of AspectJ. In other words, you may translate
 * your DSAL program into AspectJ aspects and enjoy its weaving services for free. To allow that,
 * your front-end <b>MUST</b> add to each generated aspect the annotation @AwAspectMechanism(id="<%=id%>").
 * The @Aspect annotation is optional, depending on whether you are using @AspectJ or not.</p>
 * 
 * <p>Of course, you may refine the AspectJ <b>match</b> and <b>order</b> processes
 * by overriding the corresponding <i>match</i> and <i>order</i> methods. You may want to
 * do that, e.g., in case your mechanism utilizes new join points that are not part of AspectJ. In
 * such a case, you will probably appreciate these notes:
 * <ul>
 * <li>The protected field <i>List&lt;AspectClass&gt; aspectClasses</i> holds all your DSAL aspects (those marked with
 * the @AwAspectMechanism(id="<%=id%>") annotation. You will surely need to access them so hopefully
 * this list will make your life easier. The list is getting initialized by the <b>AwesomeMechanism.setInputFiles</b> method.</li>
 * <li>The class <b>awesome.platform.InvokeMethodsEffect</b> may significantly help you
 * in creating the effects (advice) you like.</li>
 * </ul></p>
 * @author oren
 */
public aspect <%=aspectName%> extends AwesomeMechanism {
	
	public String getId() {
		return "<%=id.toLowerCase()%>";
	}
	
	@Override
	public List<IEffect> match(BcelShadow shadow) {
		return super.match(shadow);	
	}
}