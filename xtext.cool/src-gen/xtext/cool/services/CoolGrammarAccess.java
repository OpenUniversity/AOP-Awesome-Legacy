/*
* generated by Xtext
*/

package xtext.cool.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CoolGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CoordinatorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CoordinatorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGranularityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cGranularityPer_classKeyword_0_0 = (Keyword)cGranularityAssignment_0.eContents().get(0);
		private final Keyword cCoordinatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyCoordinatorBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//CoordinatorDeclaration:
		//	granularity="per_class"? "coordinator" className= // TODO should support multiple class names separated with commas...
		//	QualifiedName body=CoordinatorBody?;
		public ParserRule getRule() { return rule; }

		//granularity="per_class"? "coordinator" className= // TODO should support multiple class names separated with commas...
		//QualifiedName body=CoordinatorBody?
		public Group getGroup() { return cGroup; }

		//granularity="per_class"?
		public Assignment getGranularityAssignment_0() { return cGranularityAssignment_0; }

		//"per_class"
		public Keyword getGranularityPer_classKeyword_0_0() { return cGranularityPer_classKeyword_0_0; }

		//"coordinator"
		public Keyword getCoordinatorKeyword_1() { return cCoordinatorKeyword_1; }

		//className= // TODO should support multiple class names separated with commas...
		//QualifiedName
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//// TODO should support multiple class names separated with commas...
		//QualifiedName
		public RuleCall getClassNameQualifiedNameParserRuleCall_2_0() { return cClassNameQualifiedNameParserRuleCall_2_0; }

		//body=CoordinatorBody?
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//CoordinatorBody
		public RuleCall getBodyCoordinatorBodyParserRuleCall_3_0() { return cBodyCoordinatorBodyParserRuleCall_3_0; }
	}

	public class CoordinatorBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CoordinatorBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cCoordinatorBodyAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConditionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCondVarsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCondVarsCondVarParserRuleCall_2_1_0 = (RuleCall)cCondVarsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cCondVarsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cCondVarsCondVarParserRuleCall_2_2_1_0 = (RuleCall)cCondVarsAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIntKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOrdVarsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOrdVarsOrdVarParserRuleCall_3_1_0 = (RuleCall)cOrdVarsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOrdVarsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOrdVarsOrdVarParserRuleCall_3_2_1_0 = (RuleCall)cOrdVarsAssignment_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSelfexKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSelfexMethodsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSelfexMethodsQualifiedNameParserRuleCall_4_1_0 = (RuleCall)cSelfexMethodsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cSelfexMethodsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cSelfexMethodsQualifiedNameParserRuleCall_4_2_1_0 = (RuleCall)cSelfexMethodsAssignment_4_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cMutexSetsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMutexSetsMutexSetParserRuleCall_5_0 = (RuleCall)cMutexSetsAssignment_5.eContents().get(0);
		private final Assignment cGuardsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGuardsGuardParserRuleCall_6_0 = (RuleCall)cGuardsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CoordinatorBody:
		//	"{" // don't understand this addition, but otherwise get a warning that results in a runtime exception when the coordinator is empty.
		//	{CoordinatorBody} ("condition" condVars+=CondVar ("," condVars+=CondVar)* ";")* // should support array initialization...
		//	("int" ordVars+=OrdVar ("," ordVars+=OrdVar)* ";")* // should support more primitive types...
		//	("selfex" selfexMethods+=QualifiedName ("," selfexMethods+=QualifiedName)* ";")? // selfex has no curely braces probably because the methods are not connected to each other.
		//	mutexSets+=MutexSet* guards+=Guard* "}";
		public ParserRule getRule() { return rule; }

		//"{" // don't understand this addition, but otherwise get a warning that results in a runtime exception when the coordinator is empty.
		//{CoordinatorBody} ("condition" condVars+=CondVar ("," condVars+=CondVar)* ";")* // should support array initialization...
		//("int" ordVars+=OrdVar ("," ordVars+=OrdVar)* ";")* // should support more primitive types...
		//("selfex" selfexMethods+=QualifiedName ("," selfexMethods+=QualifiedName)* ";")? // selfex has no curely braces probably because the methods are not connected to each other.
		//mutexSets+=MutexSet* guards+=Guard* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//// don't understand this addition, but otherwise get a warning that results in a runtime exception when the coordinator is empty.
		//{CoordinatorBody}
		public Action getCoordinatorBodyAction_1() { return cCoordinatorBodyAction_1; }

		//("condition" condVars+=CondVar ("," condVars+=CondVar)* ";")*
		public Group getGroup_2() { return cGroup_2; }

		//"condition"
		public Keyword getConditionKeyword_2_0() { return cConditionKeyword_2_0; }

		//condVars+=CondVar
		public Assignment getCondVarsAssignment_2_1() { return cCondVarsAssignment_2_1; }

		//CondVar
		public RuleCall getCondVarsCondVarParserRuleCall_2_1_0() { return cCondVarsCondVarParserRuleCall_2_1_0; }

		//("," condVars+=CondVar)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//condVars+=CondVar
		public Assignment getCondVarsAssignment_2_2_1() { return cCondVarsAssignment_2_2_1; }

		//CondVar
		public RuleCall getCondVarsCondVarParserRuleCall_2_2_1_0() { return cCondVarsCondVarParserRuleCall_2_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }

		//("int" ordVars+=OrdVar ("," ordVars+=OrdVar)* ";")*
		public Group getGroup_3() { return cGroup_3; }

		//"int"
		public Keyword getIntKeyword_3_0() { return cIntKeyword_3_0; }

		//ordVars+=OrdVar
		public Assignment getOrdVarsAssignment_3_1() { return cOrdVarsAssignment_3_1; }

		//OrdVar
		public RuleCall getOrdVarsOrdVarParserRuleCall_3_1_0() { return cOrdVarsOrdVarParserRuleCall_3_1_0; }

		//("," ordVars+=OrdVar)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//ordVars+=OrdVar
		public Assignment getOrdVarsAssignment_3_2_1() { return cOrdVarsAssignment_3_2_1; }

		//OrdVar
		public RuleCall getOrdVarsOrdVarParserRuleCall_3_2_1_0() { return cOrdVarsOrdVarParserRuleCall_3_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_3() { return cSemicolonKeyword_3_3; }

		//("selfex" selfexMethods+=QualifiedName ("," selfexMethods+=QualifiedName)* ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"selfex"
		public Keyword getSelfexKeyword_4_0() { return cSelfexKeyword_4_0; }

		//selfexMethods+=QualifiedName
		public Assignment getSelfexMethodsAssignment_4_1() { return cSelfexMethodsAssignment_4_1; }

		//QualifiedName
		public RuleCall getSelfexMethodsQualifiedNameParserRuleCall_4_1_0() { return cSelfexMethodsQualifiedNameParserRuleCall_4_1_0; }

		//("," selfexMethods+=QualifiedName)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//selfexMethods+=QualifiedName
		public Assignment getSelfexMethodsAssignment_4_2_1() { return cSelfexMethodsAssignment_4_2_1; }

		//QualifiedName
		public RuleCall getSelfexMethodsQualifiedNameParserRuleCall_4_2_1_0() { return cSelfexMethodsQualifiedNameParserRuleCall_4_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }

		//mutexSets+=MutexSet*
		public Assignment getMutexSetsAssignment_5() { return cMutexSetsAssignment_5; }

		//MutexSet
		public RuleCall getMutexSetsMutexSetParserRuleCall_5_0() { return cMutexSetsMutexSetParserRuleCall_5_0; }

		//guards+=Guard*
		public Assignment getGuardsAssignment_6() { return cGuardsAssignment_6; }

		//Guard
		public RuleCall getGuardsGuardParserRuleCall_6_0() { return cGuardsGuardParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMethodsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodsIDTerminalRuleCall_1_0 = (RuleCall)cMethodsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMethodsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMethodsIDTerminalRuleCall_2_1_0 = (RuleCall)cMethodsAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRequiresAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRequiresRequiresParserRuleCall_4_0 = (RuleCall)cRequiresAssignment_4.eContents().get(0);
		
		//Guard:
		//	"guard"? methods+=ID ("," methods+=ID)* ":" requires=Requires?;
		public ParserRule getRule() { return rule; }

		//"guard"? methods+=ID ("," methods+=ID)* ":" requires=Requires?
		public Group getGroup() { return cGroup; }

		//"guard"?
		public Keyword getGuardKeyword_0() { return cGuardKeyword_0; }

		//methods+=ID
		public Assignment getMethodsAssignment_1() { return cMethodsAssignment_1; }

		//ID
		public RuleCall getMethodsIDTerminalRuleCall_1_0() { return cMethodsIDTerminalRuleCall_1_0; }

		//("," methods+=ID)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//methods+=ID
		public Assignment getMethodsAssignment_2_1() { return cMethodsAssignment_2_1; }

		//ID
		public RuleCall getMethodsIDTerminalRuleCall_2_1_0() { return cMethodsIDTerminalRuleCall_2_1_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//requires=Requires?
		public Assignment getRequiresAssignment_4() { return cRequiresAssignment_4; }

		//Requires
		public RuleCall getRequiresRequiresParserRuleCall_4_0() { return cRequiresRequiresParserRuleCall_4_0; }
	}

	public class RequiresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Requires");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAndExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAndExpressionAndExpressionParserRuleCall_1_0 = (RuleCall)cAndExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Requires:
		//	"requires" andExpression=AndExpression ";";
		public ParserRule getRule() { return rule; }

		//"requires" andExpression=AndExpression ";"
		public Group getGroup() { return cGroup; }

		//"requires"
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }

		//andExpression=AndExpression
		public Assignment getAndExpressionAssignment_1() { return cAndExpressionAssignment_1; }

		//AndExpression
		public RuleCall getAndExpressionAndExpressionParserRuleCall_1_0() { return cAndExpressionAndExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOrExpressionsOrExpressionParserRuleCall_0_0 = (RuleCall)cOrExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOrExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOrExpressionsOrExpressionParserRuleCall_1_1_0 = (RuleCall)cOrExpressionsAssignment_1_1.eContents().get(0);
		
		//// not complete. should support parenthesis.
		//AndExpression:
		//	orExpressions+=OrExpression ("&&" orExpressions+=OrExpression)*;
		public ParserRule getRule() { return rule; }

		//orExpressions+=OrExpression ("&&" orExpressions+=OrExpression)*
		public Group getGroup() { return cGroup; }

		//orExpressions+=OrExpression
		public Assignment getOrExpressionsAssignment_0() { return cOrExpressionsAssignment_0; }

		//OrExpression
		public RuleCall getOrExpressionsOrExpressionParserRuleCall_0_0() { return cOrExpressionsOrExpressionParserRuleCall_0_0; }

		//("&&" orExpressions+=OrExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//orExpressions+=OrExpression
		public Assignment getOrExpressionsAssignment_1_1() { return cOrExpressionsAssignment_1_1; }

		//OrExpression
		public RuleCall getOrExpressionsOrExpressionParserRuleCall_1_1_0() { return cOrExpressionsOrExpressionParserRuleCall_1_1_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBasicExpressionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBasicExpressionsBasicExpressionParserRuleCall_0_0 = (RuleCall)cBasicExpressionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBasicExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBasicExpressionsBasicExpressionParserRuleCall_1_1_0 = (RuleCall)cBasicExpressionsAssignment_1_1.eContents().get(0);
		
		//OrExpression:
		//	basicExpressions+=BasicExpression ("||" basicExpressions+=BasicExpression)*;
		public ParserRule getRule() { return rule; }

		//basicExpressions+=BasicExpression ("||" basicExpressions+=BasicExpression)*
		public Group getGroup() { return cGroup; }

		//basicExpressions+=BasicExpression
		public Assignment getBasicExpressionsAssignment_0() { return cBasicExpressionsAssignment_0; }

		//BasicExpression
		public RuleCall getBasicExpressionsBasicExpressionParserRuleCall_0_0() { return cBasicExpressionsBasicExpressionParserRuleCall_0_0; }

		//("||" basicExpressions+=BasicExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//basicExpressions+=BasicExpression
		public Assignment getBasicExpressionsAssignment_1_1() { return cBasicExpressionsAssignment_1_1; }

		//BasicExpression
		public RuleCall getBasicExpressionsBasicExpressionParserRuleCall_1_1_0() { return cBasicExpressionsBasicExpressionParserRuleCall_1_1_0; }
	}

	public class BasicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegatedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegatedExclamationMarkKeyword_0_0 = (Keyword)cNegatedAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExprCondVarCrossReference_1_0 = (CrossReference)cExprAssignment_1.eContents().get(0);
		private final RuleCall cExprCondVarIDTerminalRuleCall_1_0_1 = (RuleCall)cExprCondVarCrossReference_1_0.eContents().get(1);
		
		//BasicExpression:
		//	negated?="!"? expr=[CondVar];
		public ParserRule getRule() { return rule; }

		//negated?="!"? expr=[CondVar]
		public Group getGroup() { return cGroup; }

		//negated?="!"?
		public Assignment getNegatedAssignment_0() { return cNegatedAssignment_0; }

		//"!"
		public Keyword getNegatedExclamationMarkKeyword_0_0() { return cNegatedExclamationMarkKeyword_0_0; }

		//expr=[CondVar]
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//[CondVar]
		public CrossReference getExprCondVarCrossReference_1_0() { return cExprCondVarCrossReference_1_0; }

		//ID
		public RuleCall getExprCondVarIDTerminalRuleCall_1_0_1() { return cExprCondVarIDTerminalRuleCall_1_0_1; }
	}

	public class MutexSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MutexSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMutexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodsIDTerminalRuleCall_2_0 = (RuleCall)cMethodsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMethodsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMethodsIDTerminalRuleCall_3_1_0 = (RuleCall)cMethodsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MutexSet:
		//	"mutex" "{" methods+=ID ("," methods+=ID)+ "};";
		public ParserRule getRule() { return rule; }

		//"mutex" "{" methods+=ID ("," methods+=ID)+ "};"
		public Group getGroup() { return cGroup; }

		//"mutex"
		public Keyword getMutexKeyword_0() { return cMutexKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//methods+=ID
		public Assignment getMethodsAssignment_2() { return cMethodsAssignment_2; }

		//ID
		public RuleCall getMethodsIDTerminalRuleCall_2_0() { return cMethodsIDTerminalRuleCall_2_0; }

		//("," methods+=ID)+
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//methods+=ID
		public Assignment getMethodsAssignment_3_1() { return cMethodsAssignment_3_1; }

		//ID
		public RuleCall getMethodsIDTerminalRuleCall_3_1_0() { return cMethodsIDTerminalRuleCall_3_1_0; }

		//"};"
		public Keyword getRightCurlyBracketSemicolonKeyword_4() { return cRightCurlyBracketSemicolonKeyword_4; }
	}

	public class CondVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CondVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBooleanValParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//CondVar:
		//	name=ID "=" value=BooleanVal;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=BooleanVal
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=BooleanVal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//BooleanVal
		public RuleCall getValueBooleanValParserRuleCall_2_0() { return cValueBooleanValParserRuleCall_2_0; }
	}

	public class OrdVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrdVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//OrdVar:
		//	name=ID "=" value=INT;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=INT
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=INT
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}

	public class BooleanValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanVal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanVal:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private CoordinatorDeclarationElements pCoordinatorDeclaration;
	private CoordinatorBodyElements pCoordinatorBody;
	private GuardElements pGuard;
	private RequiresElements pRequires;
	private AndExpressionElements pAndExpression;
	private OrExpressionElements pOrExpression;
	private BasicExpressionElements pBasicExpression;
	private MutexSetElements pMutexSet;
	private CondVarElements pCondVar;
	private OrdVarElements pOrdVar;
	private BooleanValElements pBooleanVal;
	private QualifiedNameElements pQualifiedName;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CoolGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CoordinatorDeclaration:
	//	granularity="per_class"? "coordinator" className= // TODO should support multiple class names separated with commas...
	//	QualifiedName body=CoordinatorBody?;
	public CoordinatorDeclarationElements getCoordinatorDeclarationAccess() {
		return (pCoordinatorDeclaration != null) ? pCoordinatorDeclaration : (pCoordinatorDeclaration = new CoordinatorDeclarationElements());
	}
	
	public ParserRule getCoordinatorDeclarationRule() {
		return getCoordinatorDeclarationAccess().getRule();
	}

	//CoordinatorBody:
	//	"{" // don't understand this addition, but otherwise get a warning that results in a runtime exception when the coordinator is empty.
	//	{CoordinatorBody} ("condition" condVars+=CondVar ("," condVars+=CondVar)* ";")* // should support array initialization...
	//	("int" ordVars+=OrdVar ("," ordVars+=OrdVar)* ";")* // should support more primitive types...
	//	("selfex" selfexMethods+=QualifiedName ("," selfexMethods+=QualifiedName)* ";")? // selfex has no curely braces probably because the methods are not connected to each other.
	//	mutexSets+=MutexSet* guards+=Guard* "}";
	public CoordinatorBodyElements getCoordinatorBodyAccess() {
		return (pCoordinatorBody != null) ? pCoordinatorBody : (pCoordinatorBody = new CoordinatorBodyElements());
	}
	
	public ParserRule getCoordinatorBodyRule() {
		return getCoordinatorBodyAccess().getRule();
	}

	//Guard:
	//	"guard"? methods+=ID ("," methods+=ID)* ":" requires=Requires?;
	public GuardElements getGuardAccess() {
		return (pGuard != null) ? pGuard : (pGuard = new GuardElements());
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//Requires:
	//	"requires" andExpression=AndExpression ";";
	public RequiresElements getRequiresAccess() {
		return (pRequires != null) ? pRequires : (pRequires = new RequiresElements());
	}
	
	public ParserRule getRequiresRule() {
		return getRequiresAccess().getRule();
	}

	//// not complete. should support parenthesis.
	//AndExpression:
	//	orExpressions+=OrExpression ("&&" orExpressions+=OrExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//OrExpression:
	//	basicExpressions+=BasicExpression ("||" basicExpressions+=BasicExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//BasicExpression:
	//	negated?="!"? expr=[CondVar];
	public BasicExpressionElements getBasicExpressionAccess() {
		return (pBasicExpression != null) ? pBasicExpression : (pBasicExpression = new BasicExpressionElements());
	}
	
	public ParserRule getBasicExpressionRule() {
		return getBasicExpressionAccess().getRule();
	}

	//MutexSet:
	//	"mutex" "{" methods+=ID ("," methods+=ID)+ "};";
	public MutexSetElements getMutexSetAccess() {
		return (pMutexSet != null) ? pMutexSet : (pMutexSet = new MutexSetElements());
	}
	
	public ParserRule getMutexSetRule() {
		return getMutexSetAccess().getRule();
	}

	//CondVar:
	//	name=ID "=" value=BooleanVal;
	public CondVarElements getCondVarAccess() {
		return (pCondVar != null) ? pCondVar : (pCondVar = new CondVarElements());
	}
	
	public ParserRule getCondVarRule() {
		return getCondVarAccess().getRule();
	}

	//OrdVar:
	//	name=ID "=" value=INT;
	public OrdVarElements getOrdVarAccess() {
		return (pOrdVar != null) ? pOrdVar : (pOrdVar = new OrdVarElements());
	}
	
	public ParserRule getOrdVarRule() {
		return getOrdVarAccess().getRule();
	}

	//BooleanVal:
	//	"true" | "false";
	public BooleanValElements getBooleanValAccess() {
		return (pBooleanVal != null) ? pBooleanVal : (pBooleanVal = new BooleanValElements());
	}
	
	public ParserRule getBooleanValRule() {
		return getBooleanValAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
