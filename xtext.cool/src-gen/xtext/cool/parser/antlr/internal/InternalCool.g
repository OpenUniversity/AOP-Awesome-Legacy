/*
* generated by Xtext
*/
grammar InternalCool;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package xtext.cool.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.cool.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtext.cool.services.CoolGrammarAccess;

}

@parser::members {

 	private CoolGrammarAccess grammarAccess;
 	
    public InternalCoolParser(TokenStream input, CoolGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "CoordinatorDeclaration";	
   	}
   	
   	@Override
   	protected CoolGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCoordinatorDeclaration
entryRuleCoordinatorDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCoordinatorDeclarationRule()); }
	 iv_ruleCoordinatorDeclaration=ruleCoordinatorDeclaration 
	 { $current=$iv_ruleCoordinatorDeclaration.current; } 
	 EOF 
;

// Rule CoordinatorDeclaration
ruleCoordinatorDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_granularity_0_0=	'per_class' 
    {
        newLeafNode(lv_granularity_0_0, grammarAccess.getCoordinatorDeclarationAccess().getGranularityPer_classKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCoordinatorDeclarationRule());
	        }
       		setWithLastConsumed($current, "granularity", lv_granularity_0_0, "per_class");
	    }

)
)?	otherlv_1='coordinator' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCoordinatorDeclarationAccess().getCoordinatorKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCoordinatorDeclarationAccess().getClassNameQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_className_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoordinatorDeclarationRule());
	        }
       		set(
       			$current, 
       			"className",
        		lv_className_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCoordinatorDeclarationAccess().getBodyCoordinatorBodyParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleCoordinatorBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoordinatorDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"CoordinatorBody");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleCoordinatorBody
entryRuleCoordinatorBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCoordinatorBodyRule()); }
	 iv_ruleCoordinatorBody=ruleCoordinatorBody 
	 { $current=$iv_ruleCoordinatorBody.current; } 
	 EOF 
;

// Rule CoordinatorBody
ruleCoordinatorBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCoordinatorBodyAccess().getLeftCurlyBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getCoordinatorBodyAccess().getCoordinatorBodyAction_1(),
            $current);
    }
)(	otherlv_2='condition' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCoordinatorBodyAccess().getConditionKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCoordinatorBodyAccess().getCondVarsCondVarParserRuleCall_2_1_0()); 
	    }
		lv_condVars_3_0=ruleCondVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoordinatorBodyRule());
	        }
       		add(
       			$current, 
       			"condVars",
        		lv_condVars_3_0, 
        		"CondVar");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCoordinatorBodyAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCoordinatorBodyAccess().getCondVarsCondVarParserRuleCall_2_2_1_0()); 
	    }
		lv_condVars_5_0=ruleCondVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoordinatorBodyRule());
	        }
       		add(
       			$current, 
       			"condVars",
        		lv_condVars_5_0, 
        		"CondVar");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCoordinatorBodyAccess().getSemicolonKeyword_2_3());
    }
)*(	otherlv_7='int' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCoordinatorBodyAccess().getIntKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCoordinatorBodyAccess().getOrdVarsOrdVarParserRuleCall_3_1_0()); 
	    }
		lv_ordVars_8_0=ruleOrdVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoordinatorBodyRule());
	        }
       		add(
       			$current, 
       			"ordVars",
        		lv_ordVars_8_0, 
        		"OrdVar");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCoordinatorBodyAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCoordinatorBodyAccess().getOrdVarsOrdVarParserRuleCall_3_2_1_0()); 
	    }
		lv_ordVars_10_0=ruleOrdVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoordinatorBodyRule());
	        }
       		add(
       			$current, 
       			"ordVars",
        		lv_ordVars_10_0, 
        		"OrdVar");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getCoordinatorBodyAccess().getSemicolonKeyword_3_3());
    }
)*(	otherlv_12='selfex' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getCoordinatorBodyAccess().getSelfexKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCoordinatorBodyAccess().getSelfexMethodsQualifiedNameParserRuleCall_4_1_0()); 
	    }
		lv_selfexMethods_13_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoordinatorBodyRule());
	        }
       		add(
       			$current, 
       			"selfexMethods",
        		lv_selfexMethods_13_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getCoordinatorBodyAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCoordinatorBodyAccess().getSelfexMethodsQualifiedNameParserRuleCall_4_2_1_0()); 
	    }
		lv_selfexMethods_15_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoordinatorBodyRule());
	        }
       		add(
       			$current, 
       			"selfexMethods",
        		lv_selfexMethods_15_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_16=';' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getCoordinatorBodyAccess().getSemicolonKeyword_4_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCoordinatorBodyAccess().getMutexSetsMutexSetParserRuleCall_5_0()); 
	    }
		lv_mutexSets_17_0=ruleMutexSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCoordinatorBodyRule());
	        }
       		add(
       			$current, 
       			"mutexSets",
        		lv_mutexSets_17_0, 
        		"MutexSet");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_18='}' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getCoordinatorBodyAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleMutexSet
entryRuleMutexSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMutexSetRule()); }
	 iv_ruleMutexSet=ruleMutexSet 
	 { $current=$iv_ruleMutexSet.current; } 
	 EOF 
;

// Rule MutexSet
ruleMutexSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mutex' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMutexSetAccess().getMutexKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMutexSetAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMutexSetAccess().getMethodsQualifiedNameParserRuleCall_2_0()); 
	    }
		lv_methods_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutexSetRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMutexSetAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMutexSetAccess().getMethodsQualifiedNameParserRuleCall_3_1_0()); 
	    }
		lv_methods_4_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMutexSetRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_4_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_5='};' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMutexSetAccess().getRightCurlyBracketSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleCondVar
entryRuleCondVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCondVarRule()); }
	 iv_ruleCondVar=ruleCondVar 
	 { $current=$iv_ruleCondVar.current; } 
	 EOF 
;

// Rule CondVar
ruleCondVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getCondVarAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCondVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCondVarAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCondVarAccess().getValueBooleanValParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleBooleanVal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCondVarRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"BooleanVal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOrdVar
entryRuleOrdVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrdVarRule()); }
	 iv_ruleOrdVar=ruleOrdVar 
	 { $current=$iv_ruleOrdVar.current; } 
	 EOF 
;

// Rule OrdVar
ruleOrdVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getOrdVarAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrdVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOrdVarAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getOrdVarAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrdVarRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleBooleanVal
entryRuleBooleanVal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanValRule()); } 
	 iv_ruleBooleanVal=ruleBooleanVal 
	 { $current=$iv_ruleBooleanVal.current.getText(); }  
	 EOF 
;

// Rule BooleanVal
ruleBooleanVal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanValAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanValAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


