grammar xtext.cool.Cool with org.eclipse.xtext.common.Terminals

generate cool "http://www.cool.xtext/Cool"

CoordinatorDeclaration:
	granularity='per_class'? 'coordinator' className=QualifiedName	// TODO should support multiple class names separated with commas...
	body = CoordinatorBody?
;

CoordinatorBody:
	'{'
		{CoordinatorBody}	// don't understand this addition, but otherwise get a warning that results in a runtime exception when the coordinator is empty.
		( 'condition' condVars += CondVar (',' condVars += CondVar)* ';' )*	// should support array initialization...
		( 'int' ordVars += OrdVar (',' ordVars += OrdVar)* ';' )* // should support more primitive types...
		('selfex' selfexMethods +=  QualifiedName (',' selfexMethods += QualifiedName)* ';')?	// selfex has no curely braces probably because the methods are not connected to each other.
		mutexSets += MutexSet*
		guards += Guard*
	'}'
;

Guard:
	'guard'? methods += ID (',' methods += ID)* ':'
	requires = Requires?
	('on_entry' '{' (onEntryIfStatements += IfStatement | onEntryAssignStatements += AssignStatement)+ '}')?
	('on_exit' '{' (onExitIfStatements += IfStatement | onExitAssignStatements += AssignStatement)+ '}')?
;

IfStatement:
	'if' '(' expression = IfExpression ')' statement = AssignStatement // should support else...
;

IfExpression:
	var = ID op = ('==' | '!=') assignment = AssignedValue
;

AssignedValue:
	intval = INT | boolval = ('true' | 'false')
;

AssignStatement:
	var = [CondVar] '=' value = BooleanVal ';'// also [OrdVar] should be supported. however according to spec only boolean value is allowed here. this prevents the usage of ordvar here since we only allow int... note also that var = ([CondVar] | [OrdVar]) causes an exception
;

Requires:
	'requires' andExpression = AndExpression ';'
;

AndExpression: // not complete. should support parenthesis.
	orExpressions += OrExpression ('&&' orExpressions += OrExpression)*
;

OrExpression:
	basicExpressions += BasicExpression ('||' basicExpressions += BasicExpression)*
;

BasicExpression:
	negated ?= '!'? expr = [CondVar]
;

MutexSet:
	'mutex' '{' methods += ID (',' methods += ID)+ '};'
;

CondVar returns CondVar:
	name=ID '=' value=BooleanVal
;

OrdVar returns OrdVar:
	name=ID '=' value=INT
;

BooleanVal:
	'true' | 'false'
;
 
QualifiedName:
	ID ('.' ID)*
;
