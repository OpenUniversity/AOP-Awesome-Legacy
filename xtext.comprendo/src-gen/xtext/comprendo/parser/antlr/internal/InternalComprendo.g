/*
* generated by Xtext
*/
grammar InternalComprendo;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package xtext.comprendo.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtext.comprendo.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import xtext.comprendo.services.ComprendoGrammarAccess;

}

@parser::members {

 	private ComprendoGrammarAccess grammarAccess;
 	
    public InternalComprendoParser(TokenStream input, IAstFactory factory, ComprendoGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("xtext/comprendo/parser/antlr/internal/InternalComprendo.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ComprendoDSAL";	
   	}
   	
   	@Override
   	protected ComprendoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleComprendoDSAL
entryRuleComprendoDSAL returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComprendoDSALRule(), currentNode); }
	 iv_ruleComprendoDSAL=ruleComprendoDSAL 
	 { $current=$iv_ruleComprendoDSAL.current; } 
	 EOF 
;

// Rule ComprendoDSAL
ruleComprendoDSAL returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComprendoDSALAccess().getComprendoComprendoParserRuleCall_0(), currentNode); 
	    }
		lv_comprendo_0_0=ruleComprendo		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComprendoDSALRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"comprendo",
	        		lv_comprendo_0_0, 
	        		"Comprendo", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleComprendo
entryRuleComprendo returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getComprendoRule(), currentNode); }
	 iv_ruleComprendo=ruleComprendo 
	 { $current=$iv_ruleComprendo.current; } 
	 EOF 
;

// Rule Comprendo
ruleComprendo returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'Comprendo' 
    {
        createLeafNode(grammarAccess.getComprendoAccess().getComprendoKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getComprendoAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComprendoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getComprendoAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComprendoAccess().getScopeScopeParserRuleCall_3_0(), currentNode); 
	    }
		lv_scope_3_0=ruleScope		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComprendoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"scope",
	        		lv_scope_3_0, 
	        		"Scope", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComprendoAccess().getOutdirOutdirParserRuleCall_4_0(), currentNode); 
	    }
		lv_outdir_4_0=ruleOutdir		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComprendoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"outdir",
	        		lv_outdir_4_0, 
	        		"Outdir", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getComprendoAccess().getCommandsCommandParserRuleCall_5_0(), currentNode); 
	    }
		lv_commands_5_0=ruleCommand		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getComprendoRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"commands",
	        		lv_commands_5_0, 
	        		"Command", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getComprendoAccess().getRightCurlyBracketKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleScope
entryRuleScope returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getScopeRule(), currentNode); }
	 iv_ruleScope=ruleScope 
	 { $current=$iv_ruleScope.current; } 
	 EOF 
;

// Rule Scope
ruleScope returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'scope' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getScopeKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getScopeAccess().getValueSTRINGTerminalRuleCall_2_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getScopeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getScopeAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCommandRule(), currentNode); }
	 iv_ruleCommand=ruleCommand 
	 { $current=$iv_ruleCommand.current; } 
	 EOF 
;

// Rule Command
ruleCommand returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
(
		lv_id_0_1=	'public-executions' 
    {
        createLeafNode(grammarAccess.getCommandAccess().getIdPublicExecutionsKeyword_0_0_0(), "id"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "id", lv_id_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_id_0_2=	'private-executions' 
    {
        createLeafNode(grammarAccess.getCommandAccess().getIdPrivateExecutionsKeyword_0_0_1(), "id"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "id", lv_id_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)(	':' 
    {
        createLeafNode(grammarAccess.getCommandAccess().getColonKeyword_1_0(), null); 
    }
(
(
		lv_summary_2_0=	'summary' 
    {
        createLeafNode(grammarAccess.getCommandAccess().getSummarySummaryKeyword_1_1_0(), "summary"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCommandRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "summary", true, "summary", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?	';' 
    {
        createLeafNode(grammarAccess.getCommandAccess().getSemicolonKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleOutdir
entryRuleOutdir returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOutdirRule(), currentNode); }
	 iv_ruleOutdir=ruleOutdir 
	 { $current=$iv_ruleOutdir.current; } 
	 EOF 
;

// Rule Outdir
ruleOutdir returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'outdir' 
    {
        createLeafNode(grammarAccess.getOutdirAccess().getOutdirKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getOutdirAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getOutdirAccess().getValueSTRINGTerminalRuleCall_2_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutdirRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getOutdirAccess().getSemicolonKeyword_3(), null); 
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


