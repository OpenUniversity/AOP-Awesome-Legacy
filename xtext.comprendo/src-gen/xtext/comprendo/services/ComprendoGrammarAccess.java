/*
* generated by Xtext
*/

package xtext.comprendo.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ComprendoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ComprendoDSALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComprendoDSAL");
		private final Assignment cComprendoAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cComprendoComprendoParserRuleCall_0 = (RuleCall)cComprendoAssignment.eContents().get(0);
		
		//ComprendoDSAL:
		//	comprendo=Comprendo;
		public ParserRule getRule() { return rule; }

		//comprendo=Comprendo
		public Assignment getComprendoAssignment() { return cComprendoAssignment; }

		//Comprendo
		public RuleCall getComprendoComprendoParserRuleCall_0() { return cComprendoComprendoParserRuleCall_0; }
	}

	public class ComprendoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comprendo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComprendoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScopeScopeParserRuleCall_3_0 = (RuleCall)cScopeAssignment_3.eContents().get(0);
		private final Assignment cOutdirAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutdirOutdirParserRuleCall_4_0 = (RuleCall)cOutdirAssignment_4.eContents().get(0);
		private final Assignment cCommandsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCommandsCommandParserRuleCall_5_0 = (RuleCall)cCommandsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Comprendo:
		//	"Comprendo" name=ID "{" scope=Scope outdir=Outdir? commands+=Command* "}";
		public ParserRule getRule() { return rule; }

		//"Comprendo" name=ID "{" scope=Scope outdir=Outdir? commands+=Command* "}"
		public Group getGroup() { return cGroup; }

		//"Comprendo"
		public Keyword getComprendoKeyword_0() { return cComprendoKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//scope=Scope
		public Assignment getScopeAssignment_3() { return cScopeAssignment_3; }

		//Scope
		public RuleCall getScopeScopeParserRuleCall_3_0() { return cScopeScopeParserRuleCall_3_0; }

		//outdir=Outdir?
		public Assignment getOutdirAssignment_4() { return cOutdirAssignment_4; }

		//Outdir
		public RuleCall getOutdirOutdirParserRuleCall_4_0() { return cOutdirOutdirParserRuleCall_4_0; }

		//commands+=Command*
		public Assignment getCommandsAssignment_5() { return cCommandsAssignment_5; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_5_0() { return cCommandsCommandParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScopeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Scope:
		//	"scope" "=" value=STRING ";";
		public ParserRule getRule() { return rule; }

		//"scope" "=" value=STRING ";"
		public Group getGroup() { return cGroup; }

		//"scope"
		public Keyword getScopeKeyword_0() { return cScopeKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cIdAlternatives_0_0 = (Alternatives)cIdAssignment_0.eContents().get(0);
		private final Keyword cIdPublicExecutionsKeyword_0_0_0 = (Keyword)cIdAlternatives_0_0.eContents().get(0);
		private final Keyword cIdPrivateExecutionsKeyword_0_0_1 = (Keyword)cIdAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSummaryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cSummarySummaryKeyword_1_1_0 = (Keyword)cSummaryAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Command:
		//	id=("public-executions" | "private-executions") (":" summary?="summary")? ";";
		public ParserRule getRule() { return rule; }

		//id=("public-executions" | "private-executions") (":" summary?="summary")? ";"
		public Group getGroup() { return cGroup; }

		//id=("public-executions" | "private-executions")
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//"public-executions" | "private-executions"
		public Alternatives getIdAlternatives_0_0() { return cIdAlternatives_0_0; }

		//"public-executions"
		public Keyword getIdPublicExecutionsKeyword_0_0_0() { return cIdPublicExecutionsKeyword_0_0_0; }

		//"private-executions"
		public Keyword getIdPrivateExecutionsKeyword_0_0_1() { return cIdPrivateExecutionsKeyword_0_0_1; }

		//(":" summary?="summary")?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//summary?="summary"
		public Assignment getSummaryAssignment_1_1() { return cSummaryAssignment_1_1; }

		//"summary"
		public Keyword getSummarySummaryKeyword_1_1_0() { return cSummarySummaryKeyword_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class OutdirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Outdir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutdirKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *
		//Comprendo MyLogger {
		//	scope = { "myproj.mypackage.*" };
		//	
		//	public-executions : summary;
		//	private-executions;
		//}
		// * /Outdir:
		//	"outdir" "=" value=STRING ";";
		public ParserRule getRule() { return rule; }

		//"outdir" "=" value=STRING ";" / *
		//Comprendo MyLogger {
		//	scope = { "myproj.mypackage.*" };
		//	
		//	public-executions : summary;
		//	private-executions;
		//}
		// * /
		public Group getGroup() { return cGroup; }

		//"outdir"
		public Keyword getOutdirKeyword_0() { return cOutdirKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }

		/// *
		//Comprendo MyLogger {
		//	scope = { "myproj.mypackage.*" };
		//	
		//	public-executions : summary;
		//	private-executions;
		//}
		// * /";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	
	private ComprendoDSALElements pComprendoDSAL;
	private ComprendoElements pComprendo;
	private ScopeElements pScope;
	private CommandElements pCommand;
	private OutdirElements pOutdir;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ComprendoGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ComprendoDSAL:
	//	comprendo=Comprendo;
	public ComprendoDSALElements getComprendoDSALAccess() {
		return (pComprendoDSAL != null) ? pComprendoDSAL : (pComprendoDSAL = new ComprendoDSALElements());
	}
	
	public ParserRule getComprendoDSALRule() {
		return getComprendoDSALAccess().getRule();
	}

	//Comprendo:
	//	"Comprendo" name=ID "{" scope=Scope outdir=Outdir? commands+=Command* "}";
	public ComprendoElements getComprendoAccess() {
		return (pComprendo != null) ? pComprendo : (pComprendo = new ComprendoElements());
	}
	
	public ParserRule getComprendoRule() {
		return getComprendoAccess().getRule();
	}

	//Scope:
	//	"scope" "=" value=STRING ";";
	public ScopeElements getScopeAccess() {
		return (pScope != null) ? pScope : (pScope = new ScopeElements());
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	//Command:
	//	id=("public-executions" | "private-executions") (":" summary?="summary")? ";";
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	/// *
	//Comprendo MyLogger {
	//	scope = { "myproj.mypackage.*" };
	//	
	//	public-executions : summary;
	//	private-executions;
	//}
	// * /Outdir:
	//	"outdir" "=" value=STRING ";";
	public OutdirElements getOutdirAccess() {
		return (pOutdir != null) ? pOutdir : (pOutdir = new OutdirElements());
	}
	
	public ParserRule getOutdirRule() {
		return getOutdirAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
