/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ast\grammar.jj */
/*@egen*/options {
  STATIC = false;
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;                 
}

PARSER_BEGIN(COOLParser)

public class COOLParser/*@bgen(jjtree)*/implements COOLParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTCOOLParserState jjtree = new JJTCOOLParserState();

/*@egen*/

  public static void main(String args[]) {
    COOLParser parser;
    if (args.length == 0) {
      System.out.println("COOL Parser:  Reading from standard input . . .");
      parser = new COOLParser(System.in);
    } else if (args.length == 1) {
      System.out.println("COOL Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new COOLParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("COOL Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("COOL Parser:  Usage is one of:");
      System.out.println("         java COOLParser < inputfile");
      System.out.println("OR");
      System.out.println("         java COOLParser inputfile");
      return;
    }
    try {
      ASTCoordinatorDecl program = parser.CoordinatorDecl();
      program.dump("");
//      MacroProcessor processor = new MacroProcessor();
//      StringBuffer out = processor.process(program);
//      System.out.println(out.toString());
      System.out.println("COOL Parser:  COOL program parsed successfully.");
    } catch (ParseException e) {
      System.out.println("COOL Parser:  Encountered errors during parse."+e);
    }
  }

}
PARSER_END(COOLParser)

SKIP : /* WHITE SPACE (JAVA) */
{ " " | "\t" | "\n" | "\r" | "\f" }

SPECIAL_TOKEN : /* COMMENTS (JAVA) */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* Keywords */
{
  <COORDINATOR: "coordinator">
| <MUTEX: "mutex">
| <SELFEX: "selfex">
| <ONENTRY: "on_entry">
| <ONEXIT: "on_exit">
| <CONDITION: "condition">
| <IF : "if" >
| <DO : "do" >
| <ELSE : "else">
| <BREAK : "break" >
| <CONTINUE : "continue" >
| <TRUE : "true">
| <FALSE : "false" >
| <PER: "per">
| <CLASS: "class">
| <OBJECT: "object">
| <FINAL: "final">
| <NEW: "new">
| <BOOLEAN : "boolean">
| <BYTE : "byte" >
| <CHAR : "char">
| <SHORT : "short" >
| <INT : "int" >
| <FLOAT : "float" >
| <LONG : "long" >
| <DOUBLE : "double" >
| <REQUIRES : "requires" >
| <WHILE : "while" >
| <FOR : "for" >
| <CASE : "case" >
| <SWITCH : "switch" >
| <DEFAULTKW : "default" >
| <PACKAGE : "package" >
| <IMPORT : "import" >
}


TOKEN : 
{
  <#ALPHA: ["a"-"z","A"-"Z","_"]>
| <#DIGIT: ["0"-"9"]> 
| //LOOKAHEAD((<DIGIT>)+ "." <DIGIT>) 
    <FLOATNUM: ((<DIGIT>)+ "." (<DIGIT>)+)> 
| <NUMBER: ((<DIGIT>)+)>
| <NAME : (<ALPHA> (<ALPHA> | <DIGIT>)*) >
| <STRING :
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

ASTCoordinatorDecl CoordinatorDecl()                 : {/*@bgen(jjtree) CoordinatorDecl */
  ASTCoordinatorDecl jjtn000 = new ASTCoordinatorDecl(JJTCOORDINATORDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CoordinatorDecl */
  try {
/*@egen*/ 
  [PackageDecl()]
  (ImportDecl())*
  [Granularity()] <COORDINATOR> ClassName() ("," ClassName())* "{" CoordinationSpec() "}"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Granularity()             : {/*@bgen(jjtree) Granularity */
  ASTGranularity jjtn000 = new ASTGranularity(JJTGRANULARITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Granularity */
  try {
/*@egen*/
  <PER> (<CLASS>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.setIsClass(true);} | <OBJECT>/*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
                                                        }
/*@egen*/ {jjtn000.setIsClass(false);})/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CoordinationSpec()                  :{/*@bgen(jjtree) CoordinationSpec */
  ASTCoordinationSpec jjtn000 = new ASTCoordinationSpec(JJTCOORDINATIONSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CoordinationSpec */
    try {
/*@egen*/
    (FieldDecl()
  | CondFieldDecl()
  | SelfexDecl()
  | MutexDecl()
  | MethodManagerDecl())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void FieldDecl()           :{/*@bgen(jjtree) FieldDecl */
  ASTFieldDecl jjtn000 = new ASTFieldDecl(JJTFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FieldDecl */
                               try {
/*@egen*/PrimType() VarsInit() ";"/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/}
void CondFieldDecl()               : {/*@bgen(jjtree) CondFieldDecl */
  ASTCondFieldDecl jjtn000 = new ASTCondFieldDecl(JJTCONDFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CondFieldDecl */
                                        try {
/*@egen*/<CONDITION> VarsInit() ";"/*@bgen(jjtree)*/
                                        } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte000;
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            throw (ParseException)jjte000;
                                          }
                                          throw (Error)jjte000;
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/}
void SelfexDecl()            :{/*@bgen(jjtree) SelfexDecl */
  ASTSelfexDecl jjtn000 = new ASTSelfexDecl(JJTSELFEXDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelfexDecl */
                                 try {
/*@egen*/<SELFEX>  "{" MethodSet() "}" ";"/*@bgen(jjtree)*/
                                 } catch (Throwable jjte000) {
                                   if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte000;
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     throw (ParseException)jjte000;
                                   }
                                   throw (Error)jjte000;
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
                                 }
/*@egen*/}
void MutexDecl()           : {/*@bgen(jjtree) MutexDecl */
  ASTMutexDecl jjtn000 = new ASTMutexDecl(JJTMUTEXDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MutexDecl */
                                try {
/*@egen*/<MUTEX> "{" MethodSet() "}" ";"/*@bgen(jjtree)*/
                                } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte000;
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    throw (ParseException)jjte000;
                                  }
                                  throw (Error)jjte000;
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/}

void VarsInit()      :{}{VarInit() ("," VarInit())*}
void VarInit()         :{/*@bgen(jjtree) VarInit */
  ASTVarInit jjtn000 = new ASTVarInit(JJTVARINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VarInit */
    try {
/*@egen*/
    LOOKAHEAD(Name() "[") 
      Name() ("[" "]" {jjtn000.addDimension();})* ["=" InitArr()]
  | Name() ["=" Expr()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void InitArr()         : {/*@bgen(jjtree) InitArr */
  ASTInitArr jjtn000 = new ASTInitArr(JJTINITARR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InitArr */
                            try {
/*@egen*/"{" [(InitArr() | Expr()) ("," ( InitArr() | Expr()))*] "}"/*@bgen(jjtree)*/
                            } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                throw (RuntimeException)jjte000;
                              }
                              if (jjte000 instanceof ParseException) {
                                throw (ParseException)jjte000;
                              }
                              throw (Error)jjte000;
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void MethodSet()      :{}{MethodName() ("," MethodName())*}
void MethodName()            : {/*@bgen(jjtree) MethodName */
  ASTMethodName jjtn000 = new ASTMethodName(JJTMETHODNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MethodName */
   try {
/*@egen*/
   ClassName() ["(" [Type() ("," Type())*] ")"]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void MethodManagerDecl()                   : {/*@bgen(jjtree) MethodManagerDecl */
  ASTMethodManagerDecl jjtn000 = new ASTMethodManagerDecl(JJTMETHODMANAGERDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) MethodManagerDecl */
 try {
/*@egen*/
 MethodSet() [Requires()] "{" (OnEntry() | OnExit())+ "}"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
void Requires()          :{/*@bgen(jjtree) Requires */
  ASTRequires jjtn000 = new ASTRequires(JJTREQUIRES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Requires */
                             try {
/*@egen*/<REQUIRES> "(" ReqExpr() ")"/*@bgen(jjtree)*/
                             } catch (Throwable jjte000) {
                               if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte000;
                               }
                               if (jjte000 instanceof ParseException) {
                                 throw (ParseException)jjte000;
                               }
                               throw (Error)jjte000;
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/}
void OnEntry()         :{/*@bgen(jjtree) OnEntry */
  ASTOnEntry jjtn000 = new ASTOnEntry(JJTONENTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OnEntry */
                           try {
/*@egen*/<ONENTRY> Stmnt()/*@bgen(jjtree)*/
                           } catch (Throwable jjte000) {
                             if (jjtc000) {
                               jjtree.clearNodeScope(jjtn000);
                               jjtc000 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte000 instanceof RuntimeException) {
                               throw (RuntimeException)jjte000;
                             }
                             if (jjte000 instanceof ParseException) {
                               throw (ParseException)jjte000;
                             }
                             throw (Error)jjte000;
                           } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
                           }
/*@egen*/}
void OnExit()        :{/*@bgen(jjtree) OnExit */
  ASTOnExit jjtn000 = new ASTOnExit(JJTONEXIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OnExit */
                         try {
/*@egen*/<ONEXIT> Stmnt()/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/}

void ReqExpr()      :{} {ReqOrExpr()}
void ReqOrExpr()      : {}
  {/*@bgen(jjtree) #ReqOrExpr(> 1) */
    {
      ASTReqOrExpr jjtn001 = new ASTReqOrExpr(JJTREQOREXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ (ReqAndExpr() (LOOKAHEAD("||" ReqAndExpr()) "||" ReqAndExpr())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/}
void ReqAndExpr()       : {}
  {/*@bgen(jjtree) #ReqAndExpr(> 1) */
   {
     ASTReqAndExpr jjtn001 = new ASTReqAndExpr(JJTREQANDEXPR);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/(ReqEqExpr() (LOOKAHEAD("&&" ReqEqExpr()) "&&" ReqEqExpr())*)/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/ }
void ReqEqExpr()      : {}{/*@bgen(jjtree) #ReqEqExpr(> 1) */
 {
   ASTReqEqExpr jjtn001 = new ASTReqEqExpr(JJTREQEQEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (ReqPrimaryExpr() (LOOKAHEAD(EqOp() ReqPrimaryExpr()) EqOp() ReqPrimaryExpr())*)/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
 }
/*@egen*/}
void ReqPrimaryExpr()       : {}
{
    ReqConst() 
  | ReqNegExpr()
  | ReqBracketExpr()
  | ReqVarRef()
}
void ReqNegExpr()             :{/*@bgen(jjtree) ReqNegExpr */
  ASTReqNegExpr jjtn000 = new ASTReqNegExpr(JJTREQNEGEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ReqNegExpr */
                                  try {
/*@egen*/"!" ReqExpr()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte000;
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      throw (ParseException)jjte000;
                                    }
                                    throw (Error)jjte000;
                                  } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
                                  }
/*@egen*/}
void ReqBracketExpr()                 :{/*@bgen(jjtree) ReqBracketExpr */
  ASTReqBracketExpr jjtn000 = new ASTReqBracketExpr(JJTREQBRACKETEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ReqBracketExpr */
                                          try {
/*@egen*/"(" ReqExpr() ")"/*@bgen(jjtree)*/
                                          } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              throw (RuntimeException)jjte000;
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              throw (ParseException)jjte000;
                                            }
                                            throw (Error)jjte000;
                                          } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                            }
                                          }
/*@egen*/}
void ReqVarRef()           :{/*@bgen(jjtree) ReqVarRef */
  ASTReqVarRef jjtn000 = new ASTReqVarRef(JJTREQVARREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ReqVarRef */
                               try {
/*@egen*/Name() ("[" Expr() "]")*/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/}
void ReqConst()      : {/*@bgen(jjtree) Atom */
                        ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Atom */
                                   try {
/*@egen*/(t=<TRUE> | t=<FALSE>)/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                          }
/*@egen*/ {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/}


/*========================= Java Subset ======================= */

void Type()      :{} {PrimType() | ClassType()}
void PrimType()      : {/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Type */
try {
/*@egen*/
{jjtn000.setPrimitive(true);} PrimTypeName() ("[" "]" {jjtn000.addDimension();})*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/ 
}
void ClassType()      :{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Type */
try {
/*@egen*/
{jjtn000.setPrimitive(false);}
  Name() ("." Name())* ("[" "]" {jjtn000.addDimension();})*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/ 
}

//void TypeName() #void:{} {PrimTypeName() | Name()}
void PrimTypeName()      :{/*@bgen(jjtree) Atom */
                           ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Atom */
 try {
/*@egen*/
 (t=<BOOLEAN> | t=<BYTE> | t=<CHAR> | t=<SHORT> | t=<INT> | t=<FLOAT> | t=<LONG> | t=<DOUBLE>)/*@bgen(jjtree)*/
                                                                                               {
                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                 jjtc000 = false;
                                                                                               }
/*@egen*/ {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void Expr()      :{} {CondOrExpr()}
void CondOrExpr()      : {}
  {/*@bgen(jjtree) #CondOrExpr(> 1) */
    {
      ASTCondOrExpr jjtn001 = new ASTCondOrExpr(JJTCONDOREXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ (CondAndExpr() (LOOKAHEAD("||" CondAndExpr()) "||" CondAndExpr())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
/*@egen*/}
void CondAndExpr()       : {}
  {/*@bgen(jjtree) #CondAndExpr(> 1) */
   {
     ASTCondAndExpr jjtn001 = new ASTCondAndExpr(JJTCONDANDEXPR);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/(InclOrExpr() (LOOKAHEAD("&&" InclOrExpr()) "&&" InclOrExpr())*)/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/ }
void InclOrExpr()       : {}
 {/*@bgen(jjtree) #InclOrExpr(> 1) */
  {
    ASTInclOrExpr jjtn001 = new ASTInclOrExpr(JJTINCLOREXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/(ExclOrExpr() (LOOKAHEAD("|" ExclOrExpr()) "|" ExclOrExpr())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}
void ExclOrExpr()       : {}
 {/*@bgen(jjtree) #ExclOrExpr(> 1) */
  {
    ASTExclOrExpr jjtn001 = new ASTExclOrExpr(JJTEXCLOREXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/(AndExpr() (LOOKAHEAD("^" AndExpr()) "^" AndExpr())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}
void AndExpr()       : {}
 {/*@bgen(jjtree) #AndExpr(> 1) */
  {
    ASTAndExpr jjtn001 = new ASTAndExpr(JJTANDEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/(EqExpr() (LOOKAHEAD("&" EqExpr()) "&" EqExpr())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/}
void EqExpr()      : {}{/*@bgen(jjtree) #EqExpr(> 1) */
 {
   ASTEqExpr jjtn001 = new ASTEqExpr(JJTEQEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (RelExpr() (LOOKAHEAD(EqOp() RelExpr()) EqOp() RelExpr())*)/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
 }
/*@egen*/}
void RelExpr()      : {}{/*@bgen(jjtree) #RelExpr(> 1) */
 {
   ASTRelExpr jjtn001 = new ASTRelExpr(JJTRELEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/ 
 (ShiftExpr() (LOOKAHEAD(RelOp() ShiftExpr()) RelOp() ShiftExpr())*)/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
 }
/*@egen*/}
void ShiftExpr()      : {}{/*@bgen(jjtree) #ShiftExpr(> 1) */
 {
   ASTShiftExpr jjtn001 = new ASTShiftExpr(JJTSHIFTEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/ 
 (AddExpr() (LOOKAHEAD(ShiftOp() AddExpr()) ShiftOp() AddExpr())*)/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
 }
/*@egen*/}
void AddExpr()      : {}{/*@bgen(jjtree) #AddExpr(> 1) */
 {
   ASTAddExpr jjtn001 = new ASTAddExpr(JJTADDEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (MultExpr() (LOOKAHEAD(AddOp() MultExpr()) AddOp() MultExpr())*)/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
 }
/*@egen*/}
void MultExpr()       : {}{/*@bgen(jjtree) #MultExpr(> 1) */
 {
   ASTMultExpr jjtn001 = new ASTMultExpr(JJTMULTEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 (PrimaryExpr() (LOOKAHEAD(MultOp() PrimaryExpr()) MultOp() PrimaryExpr())*
 )/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
 }
/*@egen*/}
void PrimaryExpr()       : {}
{
    Const() 
  | UnaryExpr()
  | BracketExpr()
  | NewArrExpr()
  | LOOKAHEAD(AssignOp() | (VarRef() ("=" | AssignOp()))) 
      AssignExpr()
  | VarRef()
}

void AssignExpr()            : {/*@bgen(jjtree) AssignExpr */
  ASTAssignExpr jjtn000 = new ASTAssignExpr(JJTASSIGNEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AssignExpr */
    try {
/*@egen*/
    AssignOp() VarRef()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.setAssignType("prefix");}
  | LOOKAHEAD(VarRef() AssignOp()) 
      VarRef() AssignOp()/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {jjtn000.setAssignType("postfix");}
  | VarRef() "=" Expr()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.setAssignType("normal");}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void UnaryExpr()            :{/*@bgen(jjtree) UnaryExpr */
  ASTUnaryExpr jjtn000 = new ASTUnaryExpr(JJTUNARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) UnaryExpr */
                                try {
/*@egen*/UnaryOp() Expr()/*@bgen(jjtree)*/
                                } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte000;
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    throw (ParseException)jjte000;
                                  }
                                  throw (Error)jjte000;
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/}
void BracketExpr()              :{/*@bgen(jjtree) BracketExpr */
  ASTBracketExpr jjtn000 = new ASTBracketExpr(JJTBRACKETEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BracketExpr */
                                    try {
/*@egen*/"(" Expr() ")"/*@bgen(jjtree)*/
                                    } catch (Throwable jjte000) {
                                      if (jjtc000) {
                                        jjtree.clearNodeScope(jjtn000);
                                        jjtc000 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte000 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte000;
                                      }
                                      if (jjte000 instanceof ParseException) {
                                        throw (ParseException)jjte000;
                                      }
                                      throw (Error)jjte000;
                                    } finally {
                                      if (jjtc000) {
                                        jjtree.closeNodeScope(jjtn000, true);
                                      }
                                    }
/*@egen*/}
//variable access. Also allows to access fields of the coordinated object
void VarRef()        :{/*@bgen(jjtree) VarRef */
  ASTVarRef jjtn000 = new ASTVarRef(JJTVARREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) VarRef */
                         try {
/*@egen*/Name() ("[" Expr() "]")* ["." VarRef() {jjtn000.setComplex(true);}]/*@bgen(jjtree)*/
                         } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             throw (RuntimeException)jjte000;
                           }
                           if (jjte000 instanceof ParseException) {
                             throw (ParseException)jjte000;
                           }
                           throw (Error)jjte000;
                         } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
                         }
/*@egen*/}
//(primitive) array allocation 
void NewArrExpr()            : {/*@bgen(jjtree) NewArrExpr */
  ASTNewArrExpr jjtn000 = new ASTNewArrExpr(JJTNEWARREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) NewArrExpr */
                                  try {
/*@egen*/<NEW> PrimTypeName() ("[" Expr() "]")+/*@bgen(jjtree)*/
                                  } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte000;
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      throw (ParseException)jjte000;
                                    }
                                    throw (Error)jjte000;
                                  } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
                                  }
/*@egen*/}
void Const()      : {/*@bgen(jjtree) Atom */
                     ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Atom */
                                try {
/*@egen*/(t=<TRUE> | t=<FALSE> | t=<NUMBER> | t=<FLOATNUM>)/*@bgen(jjtree)*/
                                                                                   {
                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                     jjtc000 = false;
                                                                                   }
/*@egen*/ {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/}
//void Const() #void: {}{LOOKAHEAD(FloatConst()) FloatConst() | TokenConst()}
//void FloatConst() #Atom: {Token t1,t2;}{t1=<NUMBER> "." t2=<NUMBER> {jjtThis.setValue(t1.image+"."+t2.image);}}
//void TokenConst() #Atom: {Token t;} {(t=<TRUE> | t=<FALSE> | t=<NUMBER> ) {jjtThis.setValue(t.image);}}

// Operators
void UnaryOp()       :{/*@bgen(jjtree) Atom */
                       ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Atom */
                                 try {
/*@egen*/(t="-" | t="!" | t="~")/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                          }
/*@egen*/  {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
                                 }
/*@egen*/}
void AddOp()       :{/*@bgen(jjtree) Atom */
                     ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Atom */
                               try {
/*@egen*/(t="+" | t="-")/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                }
/*@egen*/  {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/}
void MultOp()       :{/*@bgen(jjtree) Atom */
                      ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Atom */
                                try {
/*@egen*/(t="*" | t="/" | t="%")/*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                         }
/*@egen*/  {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/}
void RelOp()       :{/*@bgen(jjtree) Atom */
                     ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Atom */
                               try {
/*@egen*/(t="<=" | t=">=" | t="<" | t=">")/*@bgen(jjtree)*/
                                                                 {
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                 }
/*@egen*/ {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
                               }
/*@egen*/}
void EqOp()       :{/*@bgen(jjtree) Atom */
                    ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Atom */
                              try {
/*@egen*/(t="!=" | t="==")/*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                 }
/*@egen*/  {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
                              }
/*@egen*/}
void ShiftOp()       :{/*@bgen(jjtree) Atom */
                       ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Atom */
                                 try {
/*@egen*/(t="<<" | t=">>" | t=">>>")/*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                              }
/*@egen*/  {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
                                 }
/*@egen*/}
void AssignOp()       : {/*@bgen(jjtree) Atom */
                         ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Atom */
                                   try {
/*@egen*/(t="++" | t="--")/*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                      }
/*@egen*/  {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/}
void AndOrOp()       :{/*@bgen(jjtree) Atom */
                       ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Atom */
                                 try {
/*@egen*/(t="&&" | t="||")/*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                    }
/*@egen*/  {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
                                 }
/*@egen*/}

void Stmnt()       : {}{
   LOOKAHEAD(Name() ":") LabeledStmnt()
 | BlockStmnt()
 | IfStmnt()
 | SwitchStmnt()
 | WhileStmnt()
 | DoStmnt()
 | ForStmnt()
 | BreakStmnt()
 | ContinueStmnt()
 | AssignExpr()
 | EmptyStmnt()
}

void BlockStmnt()            : {/*@bgen(jjtree) BlockStmnt */
  ASTBlockStmnt jjtn000 = new ASTBlockStmnt(JJTBLOCKSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BlockStmnt */
                                   try {
/*@egen*/ "{" (BlockStmntEl())* "}"/*@bgen(jjtree)*/
                                   } catch (Throwable jjte000) {
                                     if (jjtc000) {
                                       jjtree.clearNodeScope(jjtn000);
                                       jjtc000 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte000 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte000;
                                     }
                                     if (jjte000 instanceof ParseException) {
                                       throw (ParseException)jjte000;
                                     }
                                     throw (Error)jjte000;
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void BlockStmntEl()      :{} {Stmnt() | FieldDecl()}

void IfStmnt()         : {/*@bgen(jjtree) IfStmnt */
  ASTIfStmnt jjtn000 = new ASTIfStmnt(JJTIFSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IfStmnt */
  try {
/*@egen*/
  <IF> "(" Expr() ")" Stmnt() [LOOKAHEAD(1) <ELSE> Stmnt()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void WhileStmnt()            : {/*@bgen(jjtree) WhileStmnt */
  ASTWhileStmnt jjtn000 = new ASTWhileStmnt(JJTWHILESTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WhileStmnt */
  try {
/*@egen*/
  <WHILE> "(" Expr() ")" Stmnt()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}
void ForStmnt()          : {/*@bgen(jjtree) ForStmnt */
  ASTForStmnt jjtn000 = new ASTForStmnt(JJTFORSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ForStmnt */
  try {
/*@egen*/
  <FOR> "("[ForInit()] ";" [Expr() {jjtn000.setHasConditionExpr(true);}] ";" [AssignExpr() ("," AssignExpr())*] ")" Stmnt()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void ForInit()         :{/*@bgen(jjtree) ForInit */
  ASTForInit jjtn000 = new ASTForInit(JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ForInit */
    try {
/*@egen*/
    ForVarDecl()
  | ForAssignExpr() ("," ForAssignExpr())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void ForAssignExpr()            :{/*@bgen(jjtree) AssignExpr */
  ASTAssignExpr jjtn000 = new ASTAssignExpr(JJTASSIGNEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AssignExpr */
  try {
/*@egen*/ 
  VarRef() "=" Expr()/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.setAssignType("normal");}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void ForVarDecl()           :{/*@bgen(jjtree) FieldDecl */
  ASTFieldDecl jjtn000 = new ASTFieldDecl(JJTFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FieldDecl */
                                try {
/*@egen*/PrimType() VarsInit()/*@bgen(jjtree)*/
                                } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte000;
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    throw (ParseException)jjte000;
                                  }
                                  throw (Error)jjte000;
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/}


void DoStmnt()         : {/*@bgen(jjtree) DoStmnt */
  ASTDoStmnt jjtn000 = new ASTDoStmnt(JJTDOSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) DoStmnt */
                            try {
/*@egen*/<DO> Stmnt() <WHILE> "(" Expr() ")" ";"/*@bgen(jjtree)*/
                            } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                throw (RuntimeException)jjte000;
                              }
                              if (jjte000 instanceof ParseException) {
                                throw (ParseException)jjte000;
                              }
                              throw (Error)jjte000;
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
                            }
/*@egen*/}
void BreakStmnt()            :{/*@bgen(jjtree) BreakStmnt */
  ASTBreakStmnt jjtn000 = new ASTBreakStmnt(JJTBREAKSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BreakStmnt */
                                 try {
/*@egen*/<BREAK> [Name()] ";"/*@bgen(jjtree)*/
                                 } catch (Throwable jjte000) {
                                   if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte000;
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     throw (ParseException)jjte000;
                                   }
                                   throw (Error)jjte000;
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
                                 }
/*@egen*/}
void ContinueStmnt()               :{/*@bgen(jjtree) ContinueStmnt */
  ASTContinueStmnt jjtn000 = new ASTContinueStmnt(JJTCONTINUESTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ContinueStmnt */
                                       try {
/*@egen*/<CONTINUE> [Name()] ";"/*@bgen(jjtree)*/
                                       } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte000;
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           throw (ParseException)jjte000;
                                         }
                                         throw (Error)jjte000;
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
                                       }
/*@egen*/}
void SwitchStmnt()             :{/*@bgen(jjtree) SwitchStmnt */
  ASTSwitchStmnt jjtn000 = new ASTSwitchStmnt(JJTSWITCHSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SwitchStmnt */
 try {
/*@egen*/
 <SWITCH> "(" Expr() ")" "{" (CaseBlock())* "}"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

void CaseBlock()           :{/*@bgen(jjtree) CaseBlock */
  ASTCaseBlock jjtn000 = new ASTCaseBlock(JJTCASEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CaseBlock */
  try {
/*@egen*/
  (<CASE> Expr() ":" {jjtn000.setDefault(false);} 
    | <DEFAULTKW> ":" {jjtn000.setDefault(true);}) 
  CaseBlockStmnts()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void CaseBlockStmnts()            :{/*@bgen(jjtree) BlockStmnt */
  ASTBlockStmnt jjtn000 = new ASTBlockStmnt(JJTBLOCKSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) BlockStmnt */
                                      try {
/*@egen*/(BlockStmntEl())*/*@bgen(jjtree)*/
                                      } catch (Throwable jjte000) {
                                        if (jjtc000) {
                                          jjtree.clearNodeScope(jjtn000);
                                          jjtc000 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte000 instanceof RuntimeException) {
                                          throw (RuntimeException)jjte000;
                                        }
                                        if (jjte000 instanceof ParseException) {
                                          throw (ParseException)jjte000;
                                        }
                                        throw (Error)jjte000;
                                      } finally {
                                        if (jjtc000) {
                                          jjtree.closeNodeScope(jjtn000, true);
                                        }
                                      }
/*@egen*/}

void LabeledStmnt()              :{/*@bgen(jjtree) LabeledStmnt */
  ASTLabeledStmnt jjtn000 = new ASTLabeledStmnt(JJTLABELEDSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LabeledStmnt */
                                     try {
/*@egen*/Name() ":" Stmnt()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte000) {
                                       if (jjtc000) {
                                         jjtree.clearNodeScope(jjtn000);
                                         jjtc000 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte000 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte000;
                                       }
                                       if (jjte000 instanceof ParseException) {
                                         throw (ParseException)jjte000;
                                       }
                                       throw (Error)jjte000;
                                     } finally {
                                       if (jjtc000) {
                                         jjtree.closeNodeScope(jjtn000, true);
                                       }
                                     }
/*@egen*/}
void EmptyStmnt()            :{/*@bgen(jjtree) EmptyStmnt */
  ASTEmptyStmnt jjtn000 = new ASTEmptyStmnt(JJTEMPTYSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) EmptyStmnt */
                                 try {
/*@egen*/";"/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
                                 }
/*@egen*/}


//aux
void Name()      : {/*@bgen(jjtree) Atom */
                    ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Atom */
                              try {
/*@egen*/t=<NAME>/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ {jjtn000.setValue(t.image);}/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
                              }
/*@egen*/} 
void ClassName()           : {/*@bgen(jjtree) ClassName */
  ASTClassName jjtn000 = new ASTClassName(JJTCLASSNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ClassName */
                                try {
/*@egen*/Name() ("." Name())*/*@bgen(jjtree)*/
                                } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte000;
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    throw (ParseException)jjte000;
                                  }
                                  throw (Error)jjte000;
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/}
void PackageDecl()             : {/*@bgen(jjtree) PackageDecl */
  ASTPackageDecl jjtn000 = new ASTPackageDecl(JJTPACKAGEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PackageDecl */
                                    try {
/*@egen*/<PACKAGE> Name() ("." Name())* ";"/*@bgen(jjtree)*/
                                    } catch (Throwable jjte000) {
                                      if (jjtc000) {
                                        jjtree.clearNodeScope(jjtn000);
                                        jjtc000 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte000 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte000;
                                      }
                                      if (jjte000 instanceof ParseException) {
                                        throw (ParseException)jjte000;
                                      }
                                      throw (Error)jjte000;
                                    } finally {
                                      if (jjtc000) {
                                        jjtree.closeNodeScope(jjtn000, true);
                                      }
                                    }
/*@egen*/}
void ImportDecl()            : {/*@bgen(jjtree) ImportDecl */
  ASTImportDecl jjtn000 = new ASTImportDecl(JJTIMPORTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ImportDecl */
                                  try {
/*@egen*/<IMPORT> Name() (LOOKAHEAD(2) "." Name())* ["." "*" {jjtn000.setTrailingStar(true);}] ";"/*@bgen(jjtree)*/
                                  } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte000;
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      throw (ParseException)jjte000;
                                    }
                                    throw (Error)jjte000;
                                  } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
                                  }
/*@egen*/}
