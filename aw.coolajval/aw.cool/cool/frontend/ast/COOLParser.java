package cool.frontend.ast;

/* Generated By:JJTree&JavaCC: Do not edit this line. COOLParser.java */
public class COOLParser/*@bgen(jjtree)*/implements COOLParserTreeConstants, COOLParserConstants {/*@bgen(jjtree)*/
  protected JJTCOOLParserState jjtree = new JJTCOOLParserState();
  public static void main(String args[]) {
    COOLParser parser;
    if (args.length == 0) {
      System.out.println("COOL Parser:  Reading from standard input . . .");
      parser = new COOLParser(System.in);
    } else if (args.length == 1) {
      System.out.println("COOL Parser:  Reading from file " + args[0] + " . . .");
      try {
        parser = new COOLParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("COOL Parser:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("COOL Parser:  Usage is one of:");
      System.out.println("         java COOLParser < inputfile");
      System.out.println("OR");
      System.out.println("         java COOLParser inputfile");
      return;
    }
    try {
      ASTCoordinatorDecl program = parser.CoordinatorDecl();
      program.dump("");
//      MacroProcessor processor = new MacroProcessor();
//      StringBuffer out = processor.process(program);
//      System.out.println(out.toString());
      System.out.println("COOL Parser:  COOL program parsed successfully.");
    } catch (ParseException e) {
      System.out.println("COOL Parser:  Encountered errors during parse."+e);
    }
  }

  final public ASTCoordinatorDecl CoordinatorDecl() throws ParseException {
                                                        /*@bgen(jjtree) CoordinatorDecl */
  ASTCoordinatorDecl jjtn000 = new ASTCoordinatorDecl(JJTCOORDINATORDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        PackageDecl();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        ImportDecl();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PER:
        Granularity();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(COORDINATOR);
      ClassName();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(49);
        ClassName();
      }
      jj_consume_token(50);
      CoordinationSpec();
      jj_consume_token(51);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Granularity() throws ParseException {
                                  /*@bgen(jjtree) Granularity */
  ASTGranularity jjtn000 = new ASTGranularity(JJTGRANULARITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        jj_consume_token(CLASS);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.setIsClass(true);
        break;
      case OBJECT:
        jj_consume_token(OBJECT);
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
                                                         jjtn000.setIsClass(false);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CoordinationSpec() throws ParseException {
                                           /*@bgen(jjtree) CoordinationSpec */
  ASTCoordinationSpec jjtn000 = new ASTCoordinationSpec(JJTCOORDINATIONSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MUTEX:
        case SELFEX:
        case CONDITION:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case SHORT:
        case INT:
        case FLOAT:
        case LONG:
        case DOUBLE:
        case NAME:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case SHORT:
        case INT:
        case FLOAT:
        case LONG:
        case DOUBLE:
          FieldDecl();
          break;
        case CONDITION:
          CondFieldDecl();
          break;
        case SELFEX:
          SelfexDecl();
          break;
        case MUTEX:
          MutexDecl();
          break;
        case NAME:
          MethodManagerDecl();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void FieldDecl() throws ParseException {
                             /*@bgen(jjtree) FieldDecl */
  ASTFieldDecl jjtn000 = new ASTFieldDecl(JJTFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimType();
      VarsInit();
      jj_consume_token(52);
    } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte000;}
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte000;}
                                 }
                                 {if (true) throw (Error)jjte000;}
    } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
    }
  }

  final public void CondFieldDecl() throws ParseException {
                                      /*@bgen(jjtree) CondFieldDecl */
  ASTCondFieldDecl jjtn000 = new ASTCondFieldDecl(JJTCONDFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONDITION);
      VarsInit();
      jj_consume_token(52);
    } catch (Throwable jjte000) {
                                          if (jjtc000) {
                                            jjtree.clearNodeScope(jjtn000);
                                            jjtc000 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte000 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte000;}
                                          }
                                          if (jjte000 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte000;}
                                          }
                                          {if (true) throw (Error)jjte000;}
    } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
    }
  }

  final public void SelfexDecl() throws ParseException {
                               /*@bgen(jjtree) SelfexDecl */
  ASTSelfexDecl jjtn000 = new ASTSelfexDecl(JJTSELFEXDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELFEX);
      jj_consume_token(50);
      MethodSet();
      jj_consume_token(51);
      jj_consume_token(52);
    } catch (Throwable jjte000) {
                                   if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte000;}
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte000;}
                                   }
                                   {if (true) throw (Error)jjte000;}
    } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
    }
  }

  final public void MutexDecl() throws ParseException {
                              /*@bgen(jjtree) MutexDecl */
  ASTMutexDecl jjtn000 = new ASTMutexDecl(JJTMUTEXDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MUTEX);
      jj_consume_token(50);
      MethodSet();
      jj_consume_token(51);
      jj_consume_token(52);
    } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte000;}
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte000;}
                                  }
                                  {if (true) throw (Error)jjte000;}
    } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
    }
  }

  final public void VarsInit() throws ParseException {
    VarInit();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(49);
      VarInit();
    }
  }

  final public void VarInit() throws ParseException {
                         /*@bgen(jjtree) VarInit */
  ASTVarInit jjtn000 = new ASTVarInit(JJTVARINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2147483647)) {
        Name();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 53:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_5;
          }
          jj_consume_token(53);
          jj_consume_token(54);
                       jjtn000.addDimension();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 55:
          jj_consume_token(55);
          InitArr();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          Name();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 55:
            jj_consume_token(55);
            Expr();
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void InitArr() throws ParseException {
                          /*@bgen(jjtree) InitArr */
  ASTInitArr jjtn000 = new ASTInitArr(JJTINITARR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(50);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NEW:
      case FLOATNUM:
      case NUMBER:
      case NAME:
      case 50:
      case 56:
      case 60:
      case 65:
      case 66:
      case 80:
      case 81:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 50:
          InitArr();
          break;
        case TRUE:
        case FALSE:
        case NEW:
        case FLOATNUM:
        case NUMBER:
        case NAME:
        case 56:
        case 60:
        case 65:
        case 66:
        case 80:
        case 81:
          Expr();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 49:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_6;
          }
          jj_consume_token(49);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 50:
            InitArr();
            break;
          case TRUE:
          case FALSE:
          case NEW:
          case FLOATNUM:
          case NUMBER:
          case NAME:
          case 56:
          case 60:
          case 65:
          case 66:
          case 80:
          case 81:
            Expr();
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(51);
    } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte000;}
                              }
                              if (jjte000 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte000;}
                              }
                              {if (true) throw (Error)jjte000;}
    } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
    }
  }

  final public void MethodSet() throws ParseException {
    MethodName();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(49);
      MethodName();
    }
  }

  final public void MethodName() throws ParseException {
                                /*@bgen(jjtree) MethodName */
  ASTMethodName jjtn000 = new ASTMethodName(JJTMETHODNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        jj_consume_token(56);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case SHORT:
        case INT:
        case FLOAT:
        case LONG:
        case DOUBLE:
        case NAME:
          Type();
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 49:
              ;
              break;
            default:
              jj_la1[17] = jj_gen;
              break label_8;
            }
            jj_consume_token(49);
            Type();
          }
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        jj_consume_token(57);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void MethodManagerDecl() throws ParseException {
                                              /*@bgen(jjtree) MethodManagerDecl */
  ASTMethodManagerDecl jjtn000 = new ASTMethodManagerDecl(JJTMETHODMANAGERDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MethodSet();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REQUIRES:
        Requires();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(50);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ONENTRY:
          OnEntry();
          break;
        case ONEXIT:
          OnExit();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ONENTRY:
        case ONEXIT:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_9;
        }
      }
      jj_consume_token(51);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void Requires() throws ParseException {
                           /*@bgen(jjtree) Requires */
  ASTRequires jjtn000 = new ASTRequires(JJTREQUIRES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REQUIRES);
      jj_consume_token(56);
      ReqExpr();
      jj_consume_token(57);
    } catch (Throwable jjte000) {
                               if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte000;}
                               }
                               if (jjte000 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte000;}
                               }
                               {if (true) throw (Error)jjte000;}
    } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
    }
  }

  final public void OnEntry() throws ParseException {
                         /*@bgen(jjtree) OnEntry */
  ASTOnEntry jjtn000 = new ASTOnEntry(JJTONENTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ONENTRY);
      Stmnt();
    } catch (Throwable jjte000) {
                             if (jjtc000) {
                               jjtree.clearNodeScope(jjtn000);
                               jjtc000 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte000 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte000;}
                             }
                             if (jjte000 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte000;}
                             }
                             {if (true) throw (Error)jjte000;}
    } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
    }
  }

  final public void OnExit() throws ParseException {
                       /*@bgen(jjtree) OnExit */
  ASTOnExit jjtn000 = new ASTOnExit(JJTONEXIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ONEXIT);
      Stmnt();
    } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte000;}
                           }
                           if (jjte000 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte000;}
                           }
                           {if (true) throw (Error)jjte000;}
    } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
    }
  }

  final public void ReqExpr() throws ParseException {
    ReqOrExpr();
  }

  final public void ReqOrExpr() throws ParseException {
      ASTReqOrExpr jjtn001 = new ASTReqOrExpr(JJTREQOREXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      ReqAndExpr();
      label_10:
      while (true) {
        if (jj_2_2(2147483647)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(58);
        ReqAndExpr();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void ReqAndExpr() throws ParseException {
     ASTReqAndExpr jjtn001 = new ASTReqAndExpr(JJTREQANDEXPR);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      ReqEqExpr();
      label_11:
      while (true) {
        if (jj_2_3(2147483647)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(59);
        ReqEqExpr();
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void ReqEqExpr() throws ParseException {
   ASTReqEqExpr jjtn001 = new ASTReqEqExpr(JJTREQEQEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      ReqPrimaryExpr();
      label_12:
      while (true) {
        if (jj_2_4(2147483647)) {
          ;
        } else {
          break label_12;
        }
        EqOp();
        ReqPrimaryExpr();
      }
    } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
    }
  }

  final public void ReqPrimaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
      ReqConst();
      break;
    case 60:
      ReqNegExpr();
      break;
    case 56:
      ReqBracketExpr();
      break;
    case NAME:
      ReqVarRef();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ReqNegExpr() throws ParseException {
                                /*@bgen(jjtree) ReqNegExpr */
  ASTReqNegExpr jjtn000 = new ASTReqNegExpr(JJTREQNEGEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(60);
      ReqExpr();
    } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte000;}
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte000;}
                                    }
                                    {if (true) throw (Error)jjte000;}
    } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
    }
  }

  final public void ReqBracketExpr() throws ParseException {
                                        /*@bgen(jjtree) ReqBracketExpr */
  ASTReqBracketExpr jjtn000 = new ASTReqBracketExpr(JJTREQBRACKETEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(56);
      ReqExpr();
      jj_consume_token(57);
    } catch (Throwable jjte000) {
                                            if (jjtc000) {
                                              jjtree.clearNodeScope(jjtn000);
                                              jjtc000 = false;
                                            } else {
                                              jjtree.popNode();
                                            }
                                            if (jjte000 instanceof RuntimeException) {
                                              {if (true) throw (RuntimeException)jjte000;}
                                            }
                                            if (jjte000 instanceof ParseException) {
                                              {if (true) throw (ParseException)jjte000;}
                                            }
                                            {if (true) throw (Error)jjte000;}
    } finally {
                                            if (jjtc000) {
                                              jjtree.closeNodeScope(jjtn000, true);
                                            }
    }
  }

  final public void ReqVarRef() throws ParseException {
                             /*@bgen(jjtree) ReqVarRef */
  ASTReqVarRef jjtn000 = new ASTReqVarRef(JJTREQVARREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Name();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_13;
        }
        jj_consume_token(53);
        Expr();
        jj_consume_token(54);
      }
    } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte000;}
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte000;}
                                 }
                                 {if (true) throw (Error)jjte000;}
    } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
    }
  }

  final public void ReqConst() throws ParseException {
                        /*@bgen(jjtree) Atom */
                        ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                           jjtn000.setValue(t.image);
    } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
    }
  }

/*========================= Java Subset ======================= */
  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case SHORT:
    case INT:
    case FLOAT:
    case LONG:
    case DOUBLE:
      PrimType();
      break;
    case NAME:
      ClassType();
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimType() throws ParseException {
                        /*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
 jjtn000.setPrimitive(true);
      PrimTypeName();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_14;
        }
        jj_consume_token(53);
        jj_consume_token(54);
                                                       jjtn000.addDimension();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public void ClassType() throws ParseException {
                        /*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
 jjtn000.setPrimitive(false);
      Name();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 61:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_15;
        }
        jj_consume_token(61);
        Name();
      }
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_16;
        }
        jj_consume_token(53);
        jj_consume_token(54);
                                 jjtn000.addDimension();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

//void TypeName() #void:{} {PrimTypeName() | Name()}
  final public void PrimTypeName() throws ParseException {
                           /*@bgen(jjtree) Atom */
                           ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
        break;
      case BYTE:
        t = jj_consume_token(BYTE);
        break;
      case CHAR:
        t = jj_consume_token(CHAR);
        break;
      case SHORT:
        t = jj_consume_token(SHORT);
        break;
      case INT:
        t = jj_consume_token(INT);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case LONG:
        t = jj_consume_token(LONG);
        break;
      case DOUBLE:
        t = jj_consume_token(DOUBLE);
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                                 jjtc000 = false;
                                                                                                jjtn000.setValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void Expr() throws ParseException {
    CondOrExpr();
  }

  final public void CondOrExpr() throws ParseException {
      ASTCondOrExpr jjtn001 = new ASTCondOrExpr(JJTCONDOREXPR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      CondAndExpr();
      label_17:
      while (true) {
        if (jj_2_5(2147483647)) {
          ;
        } else {
          break label_17;
        }
        jj_consume_token(58);
        CondAndExpr();
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

  final public void CondAndExpr() throws ParseException {
     ASTCondAndExpr jjtn001 = new ASTCondAndExpr(JJTCONDANDEXPR);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      InclOrExpr();
      label_18:
      while (true) {
        if (jj_2_6(2147483647)) {
          ;
        } else {
          break label_18;
        }
        jj_consume_token(59);
        InclOrExpr();
      }
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
    }
  }

  final public void InclOrExpr() throws ParseException {
    ASTInclOrExpr jjtn001 = new ASTInclOrExpr(JJTINCLOREXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      ExclOrExpr();
      label_19:
      while (true) {
        if (jj_2_7(2147483647)) {
          ;
        } else {
          break label_19;
        }
        jj_consume_token(62);
        ExclOrExpr();
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void ExclOrExpr() throws ParseException {
    ASTExclOrExpr jjtn001 = new ASTExclOrExpr(JJTEXCLOREXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      AndExpr();
      label_20:
      while (true) {
        if (jj_2_8(2147483647)) {
          ;
        } else {
          break label_20;
        }
        jj_consume_token(63);
        AndExpr();
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void AndExpr() throws ParseException {
    ASTAndExpr jjtn001 = new ASTAndExpr(JJTANDEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      EqExpr();
      label_21:
      while (true) {
        if (jj_2_9(2147483647)) {
          ;
        } else {
          break label_21;
        }
        jj_consume_token(64);
        EqExpr();
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void EqExpr() throws ParseException {
   ASTEqExpr jjtn001 = new ASTEqExpr(JJTEQEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      RelExpr();
      label_22:
      while (true) {
        if (jj_2_10(2147483647)) {
          ;
        } else {
          break label_22;
        }
        EqOp();
        RelExpr();
      }
    } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
    }
  }

  final public void RelExpr() throws ParseException {
   ASTRelExpr jjtn001 = new ASTRelExpr(JJTRELEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      ShiftExpr();
      label_23:
      while (true) {
        if (jj_2_11(2147483647)) {
          ;
        } else {
          break label_23;
        }
        RelOp();
        ShiftExpr();
      }
    } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
    }
  }

  final public void ShiftExpr() throws ParseException {
   ASTShiftExpr jjtn001 = new ASTShiftExpr(JJTSHIFTEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      AddExpr();
      label_24:
      while (true) {
        if (jj_2_12(2147483647)) {
          ;
        } else {
          break label_24;
        }
        ShiftOp();
        AddExpr();
      }
    } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
    }
  }

  final public void AddExpr() throws ParseException {
   ASTAddExpr jjtn001 = new ASTAddExpr(JJTADDEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      MultExpr();
      label_25:
      while (true) {
        if (jj_2_13(2147483647)) {
          ;
        } else {
          break label_25;
        }
        AddOp();
        MultExpr();
      }
    } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
    }
  }

  final public void MultExpr() throws ParseException {
   ASTMultExpr jjtn001 = new ASTMultExpr(JJTMULTEXPR);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
    try {
      PrimaryExpr();
      label_26:
      while (true) {
        if (jj_2_14(2147483647)) {
          ;
        } else {
          break label_26;
        }
        MultOp();
        PrimaryExpr();
      }
    } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte001;}
   }
   if (jjte001 instanceof ParseException) {
     {if (true) throw (ParseException)jjte001;}
   }
   {if (true) throw (Error)jjte001;}
    } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
    }
  }

  final public void PrimaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case FLOATNUM:
    case NUMBER:
      Const();
      break;
    case 60:
    case 65:
    case 66:
      UnaryExpr();
      break;
    case 56:
      BracketExpr();
      break;
    case NEW:
      NewArrExpr();
      break;
    default:
      jj_la1[31] = jj_gen;
      if (jj_2_15(2147483647)) {
        AssignExpr();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          VarRef();
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void AssignExpr() throws ParseException {
                                /*@bgen(jjtree) AssignExpr */
  ASTAssignExpr jjtn000 = new ASTAssignExpr(JJTASSIGNEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 80:
      case 81:
        AssignOp();
        VarRef();
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.setAssignType("prefix");
        break;
      default:
        jj_la1[33] = jj_gen;
        if (jj_2_16(2147483647)) {
          VarRef();
          AssignOp();
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.setAssignType("postfix");
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NAME:
            VarRef();
            jj_consume_token(55);
            Expr();
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.setAssignType("normal");
            break;
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void UnaryExpr() throws ParseException {
                              /*@bgen(jjtree) UnaryExpr */
  ASTUnaryExpr jjtn000 = new ASTUnaryExpr(JJTUNARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryOp();
      Expr();
    } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte000;}
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte000;}
                                  }
                                  {if (true) throw (Error)jjte000;}
    } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
    }
  }

  final public void BracketExpr() throws ParseException {
                                  /*@bgen(jjtree) BracketExpr */
  ASTBracketExpr jjtn000 = new ASTBracketExpr(JJTBRACKETEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(56);
      Expr();
      jj_consume_token(57);
    } catch (Throwable jjte000) {
                                      if (jjtc000) {
                                        jjtree.clearNodeScope(jjtn000);
                                        jjtc000 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte000 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte000;}
                                      }
                                      if (jjte000 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte000;}
                                      }
                                      {if (true) throw (Error)jjte000;}
    } finally {
                                      if (jjtc000) {
                                        jjtree.closeNodeScope(jjtn000, true);
                                      }
    }
  }

//variable access. Also allows to access fields of the coordinated object
  final public void VarRef() throws ParseException {
                       /*@bgen(jjtree) VarRef */
  ASTVarRef jjtn000 = new ASTVarRef(JJTVARREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Name();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_27;
        }
        jj_consume_token(53);
        Expr();
        jj_consume_token(54);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
        jj_consume_token(61);
        VarRef();
                                                                 jjtn000.setComplex(true);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                           if (jjtc000) {
                             jjtree.clearNodeScope(jjtn000);
                             jjtc000 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte000 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte000;}
                           }
                           if (jjte000 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte000;}
                           }
                           {if (true) throw (Error)jjte000;}
    } finally {
                           if (jjtc000) {
                             jjtree.closeNodeScope(jjtn000, true);
                           }
    }
  }

//(primitive) array allocation 
  final public void NewArrExpr() throws ParseException {
                                /*@bgen(jjtree) NewArrExpr */
  ASTNewArrExpr jjtn000 = new ASTNewArrExpr(JJTNEWARREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEW);
      PrimTypeName();
      label_28:
      while (true) {
        jj_consume_token(53);
        Expr();
        jj_consume_token(54);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_28;
        }
      }
    } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte000;}
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte000;}
                                    }
                                    {if (true) throw (Error)jjte000;}
    } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
    }
  }

  final public void Const() throws ParseException {
                     /*@bgen(jjtree) Atom */
                     ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
        break;
      case FLOATNUM:
        t = jj_consume_token(FLOATNUM);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                     jjtc000 = false;
                                                                                    jjtn000.setValue(t.image);
    } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
    }
  }

//void Const() #void: {}{LOOKAHEAD(FloatConst()) FloatConst() | TokenConst()}
//void FloatConst() #Atom: {Token t1,t2;}{t1=<NUMBER> "." t2=<NUMBER> {jjtThis.setValue(t1.image+"."+t2.image);}}
//void TokenConst() #Atom: {Token t;} {(t=<TRUE> | t=<FALSE> | t=<NUMBER> ) {jjtThis.setValue(t.image);}}

// Operators
  final public void UnaryOp() throws ParseException {
                       /*@bgen(jjtree) Atom */
                       ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 65:
        t = jj_consume_token(65);
        break;
      case 60:
        t = jj_consume_token(60);
        break;
      case 66:
        t = jj_consume_token(66);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                           jjtn000.setValue(t.image);
    } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
    }
  }

  final public void AddOp() throws ParseException {
                     /*@bgen(jjtree) Atom */
                     ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        t = jj_consume_token(67);
        break;
      case 65:
        t = jj_consume_token(65);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                 jjtn000.setValue(t.image);
    } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
    }
  }

  final public void MultOp() throws ParseException {
                      /*@bgen(jjtree) Atom */
                      ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
        t = jj_consume_token(68);
        break;
      case 69:
        t = jj_consume_token(69);
        break;
      case 70:
        t = jj_consume_token(70);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                          jjtn000.setValue(t.image);
    } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
    }
  }

  final public void RelOp() throws ParseException {
                     /*@bgen(jjtree) Atom */
                     ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        t = jj_consume_token(71);
        break;
      case 72:
        t = jj_consume_token(72);
        break;
      case 73:
        t = jj_consume_token(73);
        break;
      case 74:
        t = jj_consume_token(74);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                   jjtree.closeNodeScope(jjtn000, true);
                                                                   jjtc000 = false;
                                                                  jjtn000.setValue(t.image);
    } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                 }
    }
  }

  final public void EqOp() throws ParseException {
                    /*@bgen(jjtree) Atom */
                    ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 75:
        t = jj_consume_token(75);
        break;
      case 76:
        t = jj_consume_token(76);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                  jjtn000.setValue(t.image);
    } finally {
                                if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
    }
  }

  final public void ShiftOp() throws ParseException {
                       /*@bgen(jjtree) Atom */
                       ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
        t = jj_consume_token(77);
        break;
      case 78:
        t = jj_consume_token(78);
        break;
      case 79:
        t = jj_consume_token(79);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                               jjtn000.setValue(t.image);
    } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
    }
  }

  final public void AssignOp() throws ParseException {
                         /*@bgen(jjtree) Atom */
                         ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 80:
        t = jj_consume_token(80);
        break;
      case 81:
        t = jj_consume_token(81);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                       jjtn000.setValue(t.image);
    } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
    }
  }

  final public void AndOrOp() throws ParseException {
                       /*@bgen(jjtree) Atom */
                       ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
        t = jj_consume_token(59);
        break;
      case 58:
        t = jj_consume_token(58);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                     jjtn000.setValue(t.image);
    } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
    }
  }

  final public void Stmnt() throws ParseException {
    if (jj_2_17(2147483647)) {
      LabeledStmnt();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        BlockStmnt();
        break;
      case IF:
        IfStmnt();
        break;
      case SWITCH:
        SwitchStmnt();
        break;
      case WHILE:
        WhileStmnt();
        break;
      case DO:
        DoStmnt();
        break;
      case FOR:
        ForStmnt();
        break;
      case BREAK:
        BreakStmnt();
        break;
      case CONTINUE:
        ContinueStmnt();
        break;
      case NAME:
      case 80:
      case 81:
        AssignExpr();
        break;
      case 52:
        EmptyStmnt();
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void BlockStmnt() throws ParseException {
                                /*@bgen(jjtree) BlockStmnt */
  ASTBlockStmnt jjtn000 = new ASTBlockStmnt(JJTBLOCKSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(50);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case DO:
        case BREAK:
        case CONTINUE:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case SHORT:
        case INT:
        case FLOAT:
        case LONG:
        case DOUBLE:
        case WHILE:
        case FOR:
        case SWITCH:
        case NAME:
        case 50:
        case 52:
        case 80:
        case 81:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_29;
        }
        BlockStmntEl();
      }
      jj_consume_token(51);
    } catch (Throwable jjte000) {
                                     if (jjtc000) {
                                       jjtree.clearNodeScope(jjtn000);
                                       jjtc000 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte000 instanceof RuntimeException) {
                                       {if (true) throw (RuntimeException)jjte000;}
                                     }
                                     if (jjte000 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte000;}
                                     }
                                     {if (true) throw (Error)jjte000;}
    } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
    }
  }

  final public void BlockStmntEl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case DO:
    case BREAK:
    case CONTINUE:
    case WHILE:
    case FOR:
    case SWITCH:
    case NAME:
    case 50:
    case 52:
    case 80:
    case 81:
      Stmnt();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case SHORT:
    case INT:
    case FLOAT:
    case LONG:
    case DOUBLE:
      FieldDecl();
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStmnt() throws ParseException {
                          /*@bgen(jjtree) IfStmnt */
  ASTIfStmnt jjtn000 = new ASTIfStmnt(JJTIFSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(56);
      Expr();
      jj_consume_token(57);
      Stmnt();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        Stmnt();
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhileStmnt() throws ParseException {
                                /*@bgen(jjtree) WhileStmnt */
  ASTWhileStmnt jjtn000 = new ASTWhileStmnt(JJTWHILESTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(56);
      Expr();
      jj_consume_token(57);
      Stmnt();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForStmnt() throws ParseException {
                            /*@bgen(jjtree) ForStmnt */
  ASTForStmnt jjtn000 = new ASTForStmnt(JJTFORSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(56);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case SHORT:
      case INT:
      case FLOAT:
      case LONG:
      case DOUBLE:
      case NAME:
        ForInit();
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      jj_consume_token(52);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NEW:
      case FLOATNUM:
      case NUMBER:
      case NAME:
      case 56:
      case 60:
      case 65:
      case 66:
      case 80:
      case 81:
        Expr();
                                    jjtn000.setHasConditionExpr(true);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(52);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
      case 80:
      case 81:
        AssignExpr();
        label_30:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 49:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_30;
          }
          jj_consume_token(49);
          AssignExpr();
        }
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      jj_consume_token(57);
      Stmnt();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForInit() throws ParseException {
                         /*@bgen(jjtree) ForInit */
  ASTForInit jjtn000 = new ASTForInit(JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case SHORT:
      case INT:
      case FLOAT:
      case LONG:
      case DOUBLE:
        ForVarDecl();
        break;
      case NAME:
        ForAssignExpr();
        label_31:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 49:
            ;
            break;
          default:
            jj_la1[55] = jj_gen;
            break label_31;
          }
          jj_consume_token(49);
          ForAssignExpr();
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ForAssignExpr() throws ParseException {
                                  /*@bgen(jjtree) AssignExpr */
  ASTAssignExpr jjtn000 = new ASTAssignExpr(JJTASSIGNEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      VarRef();
      jj_consume_token(55);
      Expr();
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.setAssignType("normal");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ForVarDecl() throws ParseException {
                              /*@bgen(jjtree) FieldDecl */
  ASTFieldDecl jjtn000 = new ASTFieldDecl(JJTFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimType();
      VarsInit();
    } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte000;}
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte000;}
                                  }
                                  {if (true) throw (Error)jjte000;}
    } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
    }
  }

  final public void DoStmnt() throws ParseException {
                          /*@bgen(jjtree) DoStmnt */
  ASTDoStmnt jjtn000 = new ASTDoStmnt(JJTDOSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
      Stmnt();
      jj_consume_token(WHILE);
      jj_consume_token(56);
      Expr();
      jj_consume_token(57);
      jj_consume_token(52);
    } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte000;}
                              }
                              if (jjte000 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte000;}
                              }
                              {if (true) throw (Error)jjte000;}
    } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                              }
    }
  }

  final public void BreakStmnt() throws ParseException {
                               /*@bgen(jjtree) BreakStmnt */
  ASTBreakStmnt jjtn000 = new ASTBreakStmnt(JJTBREAKSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        Name();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(52);
    } catch (Throwable jjte000) {
                                   if (jjtc000) {
                                     jjtree.clearNodeScope(jjtn000);
                                     jjtc000 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte000 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte000;}
                                   }
                                   if (jjte000 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte000;}
                                   }
                                   {if (true) throw (Error)jjte000;}
    } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
    }
  }

  final public void ContinueStmnt() throws ParseException {
                                     /*@bgen(jjtree) ContinueStmnt */
  ASTContinueStmnt jjtn000 = new ASTContinueStmnt(JJTCONTINUESTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        Name();
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      jj_consume_token(52);
    } catch (Throwable jjte000) {
                                         if (jjtc000) {
                                           jjtree.clearNodeScope(jjtn000);
                                           jjtc000 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte000 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte000;}
                                         }
                                         if (jjte000 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte000;}
                                         }
                                         {if (true) throw (Error)jjte000;}
    } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                         }
    }
  }

  final public void SwitchStmnt() throws ParseException {
                                 /*@bgen(jjtree) SwitchStmnt */
  ASTSwitchStmnt jjtn000 = new ASTSwitchStmnt(JJTSWITCHSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(56);
      Expr();
      jj_consume_token(57);
      jj_consume_token(50);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case DEFAULTKW:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_32;
        }
        CaseBlock();
      }
      jj_consume_token(51);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public void CaseBlock() throws ParseException {
                             /*@bgen(jjtree) CaseBlock */
  ASTCaseBlock jjtn000 = new ASTCaseBlock(JJTCASEBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        jj_consume_token(CASE);
        Expr();
        jj_consume_token(82);
                      jjtn000.setDefault(false);
        break;
      case DEFAULTKW:
        jj_consume_token(DEFAULTKW);
        jj_consume_token(82);
                       jjtn000.setDefault(true);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      CaseBlockStmnts();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CaseBlockStmnts() throws ParseException {
                                    /*@bgen(jjtree) BlockStmnt */
  ASTBlockStmnt jjtn000 = new ASTBlockStmnt(JJTBLOCKSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case DO:
        case BREAK:
        case CONTINUE:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case SHORT:
        case INT:
        case FLOAT:
        case LONG:
        case DOUBLE:
        case WHILE:
        case FOR:
        case SWITCH:
        case NAME:
        case 50:
        case 52:
        case 80:
        case 81:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_33;
        }
        BlockStmntEl();
      }
    } catch (Throwable jjte000) {
                                        if (jjtc000) {
                                          jjtree.clearNodeScope(jjtn000);
                                          jjtc000 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte000 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte000;}
                                        }
                                        if (jjte000 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte000;}
                                        }
                                        {if (true) throw (Error)jjte000;}
    } finally {
                                        if (jjtc000) {
                                          jjtree.closeNodeScope(jjtn000, true);
                                        }
    }
  }

  final public void LabeledStmnt() throws ParseException {
                                   /*@bgen(jjtree) LabeledStmnt */
  ASTLabeledStmnt jjtn000 = new ASTLabeledStmnt(JJTLABELEDSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Name();
      jj_consume_token(82);
      Stmnt();
    } catch (Throwable jjte000) {
                                       if (jjtc000) {
                                         jjtree.clearNodeScope(jjtn000);
                                         jjtc000 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte000 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte000;}
                                       }
                                       if (jjte000 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte000;}
                                       }
                                       {if (true) throw (Error)jjte000;}
    } finally {
                                       if (jjtc000) {
                                         jjtree.closeNodeScope(jjtn000, true);
                                       }
    }
  }

  final public void EmptyStmnt() throws ParseException {
                               /*@bgen(jjtree) EmptyStmnt */
  ASTEmptyStmnt jjtn000 = new ASTEmptyStmnt(JJTEMPTYSTMNT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(52);
    } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                   }
    }
  }

//aux
  final public void Name() throws ParseException {
                    /*@bgen(jjtree) Atom */
                    ASTAtom jjtn000 = new ASTAtom(JJTATOM);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NAME);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                        jjtn000.setValue(t.image);
    } finally {
                                if (jjtc000) {
                                  jjtree.closeNodeScope(jjtn000, true);
                                }
    }
  }

  final public void ClassName() throws ParseException {
                              /*@bgen(jjtree) ClassName */
  ASTClassName jjtn000 = new ASTClassName(JJTCLASSNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Name();
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 61:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_34;
        }
        jj_consume_token(61);
        Name();
      }
    } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte000;}
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte000;}
                                  }
                                  {if (true) throw (Error)jjte000;}
    } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
    }
  }

  final public void PackageDecl() throws ParseException {
                                  /*@bgen(jjtree) PackageDecl */
  ASTPackageDecl jjtn000 = new ASTPackageDecl(JJTPACKAGEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PACKAGE);
      Name();
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 61:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_35;
        }
        jj_consume_token(61);
        Name();
      }
      jj_consume_token(52);
    } catch (Throwable jjte000) {
                                      if (jjtc000) {
                                        jjtree.clearNodeScope(jjtn000);
                                        jjtc000 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte000 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte000;}
                                      }
                                      if (jjte000 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte000;}
                                      }
                                      {if (true) throw (Error)jjte000;}
    } finally {
                                      if (jjtc000) {
                                        jjtree.closeNodeScope(jjtn000, true);
                                      }
    }
  }

  final public void ImportDecl() throws ParseException {
                                /*@bgen(jjtree) ImportDecl */
  ASTImportDecl jjtn000 = new ASTImportDecl(JJTIMPORTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMPORT);
      Name();
      label_36:
      while (true) {
        if (jj_2_18(2)) {
          ;
        } else {
          break label_36;
        }
        jj_consume_token(61);
        Name();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
        jj_consume_token(61);
        jj_consume_token(68);
                                                                                       jjtn000.setTrailingStar(true);
        break;
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      jj_consume_token(52);
    } catch (Throwable jjte000) {
                                    if (jjtc000) {
                                      jjtree.clearNodeScope(jjtn000);
                                      jjtc000 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte000 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte000;}
                                    }
                                    if (jjte000 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte000;}
                                    }
                                    {if (true) throw (Error)jjte000;}
    } finally {
                                    if (jjtc000) {
                                      jjtree.closeNodeScope(jjtn000, true);
                                    }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_3R_64() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(53)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(61)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_97()) return true;
    Token xsp;
    if (jj_3R_98()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(56)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(82)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_3R_96()) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_58()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_54()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_52()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(55)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_58()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_50()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_59()) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_54()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_40()) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(62)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_52()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_50()) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_40()) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(62)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(63)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(56)) return true;
    if (jj_3R_94()) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) return true;
    }
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(60)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_40()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_40()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(59)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(61)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_87()) return true;
    return false;
  }

  public COOLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[65];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x400000,0x0,0x1800000,0xf8004c00,0xf8004c00,0x0,0x0,0x0,0x0,0x0,0x4300000,0x0,0x4300000,0x4300000,0x0,0x0,0xf8000000,0x0,0x0,0x3000,0x3000,0x300000,0x0,0x300000,0xf8000000,0x0,0x0,0x0,0xf8000000,0x4300000,0x0,0x0,0x0,0x0,0x0,0x0,0x300000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd8000,0xf80d8000,0xf80d8000,0x20000,0xf8000000,0x4300000,0x0,0x0,0x0,0xf8000000,0x0,0x0,0x0,0x0,0xf80d8000,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x200,0x400,0x0,0x20000,0x0,0x8007,0x8007,0x20000,0x200000,0x800000,0x800000,0x8000,0x1104e000,0x20000,0x1104e000,0x1104e000,0x20000,0x20000,0x8007,0x1000000,0x8,0x0,0x0,0x11008000,0x200000,0x0,0x8007,0x200000,0x20000000,0x200000,0x7,0x11006000,0x8000,0x0,0x8000,0x200000,0x20000000,0x200000,0x6000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0xc000000,0x1480b0,0x1480b7,0x1480b7,0x0,0x8007,0x1100e000,0x20000,0x8000,0x20000,0x8007,0x8000,0x8000,0x140,0x140,0x1480b7,0x20000000,0x20000000,0x20000000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30006,0x0,0x30006,0x30006,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x0,0x30000,0x0,0x0,0x0,0x0,0x0,0x6,0xa,0x70,0x780,0x1800,0xe000,0x30000,0x0,0x30000,0x30000,0x30000,0x0,0x0,0x30006,0x0,0x30000,0x0,0x0,0x0,0x0,0x0,0x0,0x30000,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[18];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public COOLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public COOLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new COOLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public COOLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new COOLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public COOLParser(COOLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(COOLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[83];
    for (int i = 0; i < 83; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 65; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
