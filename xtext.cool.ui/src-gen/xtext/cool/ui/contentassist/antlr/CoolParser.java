/*
* generated by Xtext
*/
package xtext.cool.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import xtext.cool.services.CoolGrammarAccess;

public class CoolParser extends AbstractContentAssistParser {
	
	@Inject
	private CoolGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected xtext.cool.ui.contentassist.antlr.internal.InternalCoolParser createParser() {
		xtext.cool.ui.contentassist.antlr.internal.InternalCoolParser result = new xtext.cool.ui.contentassist.antlr.internal.InternalCoolParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getGuardAccess().getAlternatives_5_2(), "rule__Guard__Alternatives_5_2");
					put(grammarAccess.getGuardAccess().getAlternatives_6_2(), "rule__Guard__Alternatives_6_2");
					put(grammarAccess.getIfExpressionAccess().getOpAlternatives_1_0(), "rule__IfExpression__OpAlternatives_1_0");
					put(grammarAccess.getAssignedValueAccess().getAlternatives(), "rule__AssignedValue__Alternatives");
					put(grammarAccess.getAssignedValueAccess().getBoolvalAlternatives_1_0(), "rule__AssignedValue__BoolvalAlternatives_1_0");
					put(grammarAccess.getBooleanValAccess().getAlternatives(), "rule__BooleanVal__Alternatives");
					put(grammarAccess.getCoordinatorDeclarationAccess().getGroup(), "rule__CoordinatorDeclaration__Group__0");
					put(grammarAccess.getCoordinatorBodyAccess().getGroup(), "rule__CoordinatorBody__Group__0");
					put(grammarAccess.getCoordinatorBodyAccess().getGroup_2(), "rule__CoordinatorBody__Group_2__0");
					put(grammarAccess.getCoordinatorBodyAccess().getGroup_2_2(), "rule__CoordinatorBody__Group_2_2__0");
					put(grammarAccess.getCoordinatorBodyAccess().getGroup_3(), "rule__CoordinatorBody__Group_3__0");
					put(grammarAccess.getCoordinatorBodyAccess().getGroup_3_2(), "rule__CoordinatorBody__Group_3_2__0");
					put(grammarAccess.getCoordinatorBodyAccess().getGroup_4(), "rule__CoordinatorBody__Group_4__0");
					put(grammarAccess.getCoordinatorBodyAccess().getGroup_4_2(), "rule__CoordinatorBody__Group_4_2__0");
					put(grammarAccess.getGuardAccess().getGroup(), "rule__Guard__Group__0");
					put(grammarAccess.getGuardAccess().getGroup_2(), "rule__Guard__Group_2__0");
					put(grammarAccess.getGuardAccess().getGroup_5(), "rule__Guard__Group_5__0");
					put(grammarAccess.getGuardAccess().getGroup_6(), "rule__Guard__Group_6__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfExpressionAccess().getGroup(), "rule__IfExpression__Group__0");
					put(grammarAccess.getAssignStatementAccess().getGroup(), "rule__AssignStatement__Group__0");
					put(grammarAccess.getRequiresAccess().getGroup(), "rule__Requires__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getBasicExpressionAccess().getGroup(), "rule__BasicExpression__Group__0");
					put(grammarAccess.getMutexSetAccess().getGroup(), "rule__MutexSet__Group__0");
					put(grammarAccess.getMutexSetAccess().getGroup_3(), "rule__MutexSet__Group_3__0");
					put(grammarAccess.getCondVarAccess().getGroup(), "rule__CondVar__Group__0");
					put(grammarAccess.getOrdVarAccess().getGroup(), "rule__OrdVar__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getCoordinatorDeclarationAccess().getGranularityAssignment_0(), "rule__CoordinatorDeclaration__GranularityAssignment_0");
					put(grammarAccess.getCoordinatorDeclarationAccess().getClassNameAssignment_2(), "rule__CoordinatorDeclaration__ClassNameAssignment_2");
					put(grammarAccess.getCoordinatorDeclarationAccess().getBodyAssignment_3(), "rule__CoordinatorDeclaration__BodyAssignment_3");
					put(grammarAccess.getCoordinatorBodyAccess().getCondVarsAssignment_2_1(), "rule__CoordinatorBody__CondVarsAssignment_2_1");
					put(grammarAccess.getCoordinatorBodyAccess().getCondVarsAssignment_2_2_1(), "rule__CoordinatorBody__CondVarsAssignment_2_2_1");
					put(grammarAccess.getCoordinatorBodyAccess().getOrdVarsAssignment_3_1(), "rule__CoordinatorBody__OrdVarsAssignment_3_1");
					put(grammarAccess.getCoordinatorBodyAccess().getOrdVarsAssignment_3_2_1(), "rule__CoordinatorBody__OrdVarsAssignment_3_2_1");
					put(grammarAccess.getCoordinatorBodyAccess().getSelfexMethodsAssignment_4_1(), "rule__CoordinatorBody__SelfexMethodsAssignment_4_1");
					put(grammarAccess.getCoordinatorBodyAccess().getSelfexMethodsAssignment_4_2_1(), "rule__CoordinatorBody__SelfexMethodsAssignment_4_2_1");
					put(grammarAccess.getCoordinatorBodyAccess().getMutexSetsAssignment_5(), "rule__CoordinatorBody__MutexSetsAssignment_5");
					put(grammarAccess.getCoordinatorBodyAccess().getGuardsAssignment_6(), "rule__CoordinatorBody__GuardsAssignment_6");
					put(grammarAccess.getGuardAccess().getMethodsAssignment_1(), "rule__Guard__MethodsAssignment_1");
					put(grammarAccess.getGuardAccess().getMethodsAssignment_2_1(), "rule__Guard__MethodsAssignment_2_1");
					put(grammarAccess.getGuardAccess().getRequiresAssignment_4(), "rule__Guard__RequiresAssignment_4");
					put(grammarAccess.getGuardAccess().getOnEntryIfStatementsAssignment_5_2_0(), "rule__Guard__OnEntryIfStatementsAssignment_5_2_0");
					put(grammarAccess.getGuardAccess().getOnEntryAssignStatementsAssignment_5_2_1(), "rule__Guard__OnEntryAssignStatementsAssignment_5_2_1");
					put(grammarAccess.getGuardAccess().getOnExitIfStatementsAssignment_6_2_0(), "rule__Guard__OnExitIfStatementsAssignment_6_2_0");
					put(grammarAccess.getGuardAccess().getOnExitAssignStatementsAssignment_6_2_1(), "rule__Guard__OnExitAssignStatementsAssignment_6_2_1");
					put(grammarAccess.getIfStatementAccess().getExpressionAssignment_2(), "rule__IfStatement__ExpressionAssignment_2");
					put(grammarAccess.getIfStatementAccess().getStatementAssignment_4(), "rule__IfStatement__StatementAssignment_4");
					put(grammarAccess.getIfExpressionAccess().getVarAssignment_0(), "rule__IfExpression__VarAssignment_0");
					put(grammarAccess.getIfExpressionAccess().getOpAssignment_1(), "rule__IfExpression__OpAssignment_1");
					put(grammarAccess.getIfExpressionAccess().getAssignmentAssignment_2(), "rule__IfExpression__AssignmentAssignment_2");
					put(grammarAccess.getAssignedValueAccess().getIntvalAssignment_0(), "rule__AssignedValue__IntvalAssignment_0");
					put(grammarAccess.getAssignedValueAccess().getBoolvalAssignment_1(), "rule__AssignedValue__BoolvalAssignment_1");
					put(grammarAccess.getAssignStatementAccess().getVarAssignment_0(), "rule__AssignStatement__VarAssignment_0");
					put(grammarAccess.getAssignStatementAccess().getValueAssignment_2(), "rule__AssignStatement__ValueAssignment_2");
					put(grammarAccess.getRequiresAccess().getAndExpressionAssignment_1(), "rule__Requires__AndExpressionAssignment_1");
					put(grammarAccess.getAndExpressionAccess().getOrExpressionsAssignment_0(), "rule__AndExpression__OrExpressionsAssignment_0");
					put(grammarAccess.getAndExpressionAccess().getOrExpressionsAssignment_1_1(), "rule__AndExpression__OrExpressionsAssignment_1_1");
					put(grammarAccess.getOrExpressionAccess().getBasicExpressionsAssignment_0(), "rule__OrExpression__BasicExpressionsAssignment_0");
					put(grammarAccess.getOrExpressionAccess().getBasicExpressionsAssignment_1_1(), "rule__OrExpression__BasicExpressionsAssignment_1_1");
					put(grammarAccess.getBasicExpressionAccess().getNegatedAssignment_0(), "rule__BasicExpression__NegatedAssignment_0");
					put(grammarAccess.getBasicExpressionAccess().getExprAssignment_1(), "rule__BasicExpression__ExprAssignment_1");
					put(grammarAccess.getMutexSetAccess().getMethodsAssignment_2(), "rule__MutexSet__MethodsAssignment_2");
					put(grammarAccess.getMutexSetAccess().getMethodsAssignment_3_1(), "rule__MutexSet__MethodsAssignment_3_1");
					put(grammarAccess.getCondVarAccess().getNameAssignment_0(), "rule__CondVar__NameAssignment_0");
					put(grammarAccess.getCondVarAccess().getValueAssignment_2(), "rule__CondVar__ValueAssignment_2");
					put(grammarAccess.getOrdVarAccess().getNameAssignment_0(), "rule__OrdVar__NameAssignment_0");
					put(grammarAccess.getOrdVarAccess().getValueAssignment_2(), "rule__OrdVar__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			xtext.cool.ui.contentassist.antlr.internal.InternalCoolParser typedParser = (xtext.cool.ui.contentassist.antlr.internal.InternalCoolParser) parser;
			typedParser.entryRuleCoordinatorDeclaration();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CoolGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CoolGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
